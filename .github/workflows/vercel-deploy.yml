name: Vercel Deployment with CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  NODE_VERSION: "18.x"

jobs:
  # Quality checks
  quality:
    name: Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run ESLint
        run: npm run lint
        continue-on-error: true

      - name: Run type check
        run: |
          npx tsc --noEmit --skipLibCheck
        continue-on-error: true

      - name: Test build
        run: npm run build
        env:
          NODE_ENV: production
          # Mock environment variables for build test
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL || 'https://mock.supabase.co' }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'mock-key' }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-output
          path: .next/
          retention-days: 1

  # Deploy Preview (for PRs and develop branch)
  preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: quality
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "preview-url=$url" >> $GITHUB_OUTPUT

      - name: Comment PR with preview URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('FleetFlow Preview Deployment')
            );

            const body = `## ðŸš€ FleetFlow Preview Deployment

            **Preview URL:** ${{ steps.deploy.outputs.preview-url }}

            âœ… Successfully deployed preview for commit ${{ github.sha }}

            ### ðŸ“Š Deployment Details
            - **Branch:** \`${{ github.head_ref }}\`
            - **Commit:** \`${{ github.sha }}\`
            - **Workflow:** [View run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

            ### ðŸ§ª Test the deployment
            - [ ] User management page loads correctly
            - [ ] Authentication works
            - [ ] Database connections are functional
            - [ ] API endpoints respond properly

            ---
            *This preview will be available until the next deployment*`;

            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }

  # Deploy Production (for main branch only)
  production:
    name: Deploy Production
    runs-on: ubuntu-latest
    needs: quality
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "production-url=$url" >> $GITHUB_OUTPUT

      - name: Create deployment status
        uses: actions/github-script@v6
        with:
          script: |
            const { data: deployment } = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              auto_merge: false,
              required_contexts: []
            });

            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.id,
              state: 'success',
              environment_url: '${{ steps.deploy.outputs.production-url }}',
              log_url: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}',
              description: 'FleetFlow production deployment successful'
            });

  # Post-deployment health checks
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: [production]
    if: always() && (needs.production.result == 'success')

    steps:
      - name: Wait for deployment to be ready
        run: sleep 30

      - name: Health check - Homepage
        run: |
          curl -f ${{ needs.production.outputs.production-url || 'https://fleetflow.vercel.app' }} || exit 1

      - name: Health check - API endpoints
        run: |
          # Test basic API endpoints
          curl -f ${{ needs.production.outputs.production-url || 'https://fleetflow.vercel.app' }}/api/test || echo "API test endpoint not available"

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'ðŸš¨ Production Health Check Failed',
              body: `Production deployment health check failed.

              **Deployment URL:** ${{ needs.production.outputs.production-url }}
              **Workflow:** [View run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
              **Commit:** ${{ github.sha }}

              Please investigate and fix any issues.`,
              labels: ['bug', 'production', 'urgent']
            });

  # Cleanup old preview deployments (optional)
  cleanup:
    name: Cleanup Old Previews
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed'

    steps:
      - name: Delete preview deployments for closed PR
        run: |
          echo "Cleaning up preview deployments for closed PR"
          # Vercel automatically handles cleanup, but you can add custom logic here
