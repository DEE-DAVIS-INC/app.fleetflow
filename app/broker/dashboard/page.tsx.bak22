'use client';

import Link from 'next/link';
import { useRouter } from 'next/navigation';
import { useEffect, useState } from 'react';
import AddShipperForm from '../../components/AddShipperForm';
import BOLReviewPanel from '../../components/BOLReviewPanel';
import BrokerAIIntelligenceHub from '../../components/BrokerAIIntelligenceHub';
import BrokerCarrierNetworkManager from '../../components/BrokerCarrierNetworkManager';
import BrokerEnhancedCRM from '../../components/BrokerEnhancedCRM';
import BrokerFinancialDashboard from '../../components/BrokerFinancialDashboard';
import BrokerMarketIntelligence from '../../components/BrokerMarketIntelligence';
import BrokerRegulatoryCompliance from '../../components/BrokerRegulatoryCompliance';
import BrokerShipperAcquisition from '../../components/BrokerShipperAcquisition';
import BrokerTaskPrioritizationPanel from '../../components/BrokerTaskPrioritizationPanel';
import BrokerWorkflowAutomationEngine from '../../components/BrokerWorkflowAutomationEngine';
import CreateLoadForm from '../../components/CreateLoadForm';
// import CustomizableDashboard from '../../components/CustomizableDashboard'; // Temporarily disabled due to Grid3x3 import issue
import EnhancedLoadBoard from '../../components/EnhancedLoadBoard';

import SpotRateOptimizationWidget from '../../components/SpotRateOptimizationWidget';
import WarehouseShipmentFlow from '../../components/WarehouseShipmentFlow';
// import { getAvailableDispatchers } from '../../config/access';
import { businessWorkflowManager } from '../../services/businessWorkflowManager';
// import { useShipper } from '../../contexts/ShipperContext';
import {
  BrokerMarginTracking,
  BrokerPerformanceMetrics,
  LoadBidding,
  brokerAnalyticsService,
} from '../../services/BrokerAnalyticsService';
// Removed old CRM imports - now using Enhanced CRM system
import {
  BrokerContract,
  brokerContractService,
} from '../../services/BrokerContractService';
import { Load } from '../../services/loadService';

interface BrokerSession {
  id: string;
  brokerCode: string;
  brokerName: string;
  email: string;
  role: string;
  loginTime: string;
  isNewRegistration?: boolean;
}

export default function BrokerDashboard() {
  const [selectedTab, setSelectedTab] = useState('operations-hub');
  const [showCreateForm, setShowCreateForm] = useState(false);
  const [showAddShipper, setShowAddShipper] = useState(false);
  const [brokerSession, setBrokerSession] = useState<BrokerSession | null>(
    null
  );
  const router = useRouter();
  // const availableDispatchers = getAvailableDispatchers();

  // Temporary shipper state until context is fixed
  const [shippers] = useState([]);
  const setShippers = () => {};

  // Load enhanced broker data
  useEffect(() => {
    const loadBrokerData = async () => {
      try {
        // Load performance metrics
        const metrics = brokerAnalyticsService.getBrokerPerformanceMetrics();
        setPerformanceMetrics(metrics);

        // Load margin tracking
        const margins = brokerAnalyticsService.getMarginTracking();
        setMarginTracking(margins);

        // Load bidding history
        const bidding = brokerAnalyticsService.getBiddingHistory();
        setBiddingHistory(bidding);

        // Load contracts
        const contracts = brokerContractService.getBrokerContracts();
        setBrokerContracts(contracts);

        // CRM data now handled by Enhanced CRM system
      } catch (error) {
        console.error('Error loading broker data:', error);
      }
    };

    loadBrokerData();

    // Refresh data every 30 seconds
    const interval = setInterval(loadBrokerData, 30000);
    return () => clearInterval(interval);
  }, []);

  // Freight Quotes state variables
  const [showConfirmation, setShowConfirmation] = useState(false);
  const [pendingQuote, setPendingQuote] = useState<any>(null);
  const [quotes, setQuotes] = useState<any[]>([]);
  const [activeQuoteTab, setActiveQuoteTab] = useState<
    | 'LTL'
    | 'FTL'
    | 'Specialized'
    | 'Warehousing'
    | 'Multi-Service'
    | 'History'
    | 'SpotRates'
  >('LTL');

  // LTL State
  const [ltlData, setLtlData] = useState({
    weight: '',
    pallets: '',
    freightClass: '50',
    liftgate: false,
    residential: false,
    origin: '',
    destination: '',
    commodity: '',
  });

  // FTL State
  const [ftlData, setFtlData] = useState({
    miles: '',
    equipmentType: 'Van',
    weight: '',
    origin: '',
    destination: '',
    commodity: '',
    hazmat: false,
    teamDriver: false,
  });

  // Specialized State
  const [specializedData, setSpecializedData] = useState({
    serviceType: 'White Glove',
    weight: '',
    dimensions: '',
    value: '',
    origin: '',
    destination: '',
    specialRequirements: [] as string[],
  });

  // Warehousing State
  const [warehousingData, setWarehousingData] = useState({
    serviceType: 'Storage',
    palletCount: '',
    duration: '',
    location: '',
    temperature: 'Ambient',
  });

  // Multi-Service State
  const [multiServiceData, setMultiServiceData] = useState({
    selectedServices: [] as string[],
    commonOrigin: '',
    commonDestination: '',
    totalWeight: '',
    notes: '',
  });

  // Quote Acceptance Workflow state variables
  const [acceptedQuotes, setAcceptedQuotes] = useState<any[]>([]);
  const [showQuoteAcceptance, setShowQuoteAcceptance] = useState(false);
  const [selectedAcceptedQuote, setSelectedAcceptedQuote] = useState<any>(null);
  const [contractGenerationStatus, setContractGenerationStatus] = useState<
    'idle' | 'generating' | 'sent' | 'error'
  >('idle');
  const [quoteAcceptanceWorkflow, setQuoteAcceptanceWorkflow] =
    useState<any>(null);

  // Enhanced Broker Features State
  const [performanceMetrics, setPerformanceMetrics] =
    useState<BrokerPerformanceMetrics | null>(null);
  const [marginTracking, setMarginTracking] = useState<BrokerMarginTracking[]>(
    []
  );
  const [biddingHistory, setBiddingHistory] = useState<LoadBidding[]>([]);
  const [brokerContracts, setBrokerContracts] = useState<BrokerContract[]>([]);
  // CRM functionality moved to Enhanced CRM system
  const [showShipperDetails, setShowShipperDetails] = useState(false);
  const [showContractWorkflow, setShowContractWorkflow] = useState(false);
  const [selectedContract, setSelectedContract] =
    useState<BrokerContract | null>(null);
  const [showBiddingModal, setShowBiddingModal] = useState(false);
  const [selectedLoadForBid, setSelectedLoadForBid] = useState<any>(null);
  const [bidAmount, setBidAmount] = useState('');
  const [bidNotes, setBidNotes] = useState('');

  // Add missing CRM variables for backward compatibility
  const [shipperProfiles] = useState<any[]>([]);
  const [selectedShipper, setSelectedShipper] = useState<any>(null);
  const [upsellOpportunities] = useState<any[]>([]);

  // Shipper Creation Workflow state variables
  const [showShipperCreation, setShowShipperCreation] = useState(false);
  const [shipperCreationMode, setShipperCreationMode] = useState<
    'manual' | 'automated'
  >('manual');
  const [workflowForShipperCreation, setWorkflowForShipperCreation] =
    useState<any>(null);

  // Calculation Functions
  const calculateLTL = () => {
    console.log('🔄 Calculating LTL Quote...');
    const weight = parseFloat(ltlData.weight) || 0;
    const pallets = parseInt(ltlData.pallets) || 1;
    const freightClass = parseInt(ltlData.freightClass) || 50;

    let baseRate = weight * 0.85;
    if (freightClass >= 175) baseRate *= 1.5;
    else if (freightClass >= 125) baseRate *= 1.3;
    else if (freightClass >= 85) baseRate *= 1.1;

    let totalRate = baseRate;
    if (ltlData.liftgate) totalRate += 150;
    if (ltlData.residential) totalRate += 200;

    const fuelSurcharge = totalRate * 0.15;
    const total = totalRate + fuelSurcharge;

    const quote = {
      id: Date.now().toString(),
      type: 'LTL',
      quoteNumber: `LTL-${Date.now()}`,
      timestamp: Date.now(),
      baseRate: Math.round(totalRate),
      fuelSurcharge: Math.round(fuelSurcharge),
      total: Math.round(total),
      details: {
        weight,
        pallets,
        freightClass,
        liftgate: ltlData.liftgate,
        residential: ltlData.residential,
        origin: ltlData.origin,
        destination: ltlData.destination,
        commodity: ltlData.commodity,
      },
    };

    console.log('✅ LTL Quote calculated:', quote);
    setPendingQuote(quote);
    setShowConfirmation(true);
  };

  const calculateFTL = () => {
    console.log('🔄 Calculating FTL Quote...');
    const miles = parseFloat(ftlData.miles) || 0;
    const weight = parseFloat(ftlData.weight) || 0;

    let baseRate = miles * 2.5;
    if (ftlData.equipmentType === 'Flatbed') baseRate *= 1.3;
    else if (ftlData.equipmentType === 'Reefer') baseRate *= 1.4;
    else if (ftlData.equipmentType === 'Power Only') baseRate *= 0.8;

    if (ftlData.hazmat) baseRate *= 1.25;
    if (ftlData.teamDriver) baseRate *= 1.5;

    const fuelSurcharge = baseRate * 0.18;
    const total = baseRate + fuelSurcharge;

    const quote = {
      id: Date.now().toString(),
      type: 'FTL',
      quoteNumber: `FTL-${Date.now()}`,
      timestamp: Date.now(),
      baseRate: Math.round(baseRate),
      fuelSurcharge: Math.round(fuelSurcharge),
      total: Math.round(total),
      details: {
        miles,
        weight,
        equipmentType: ftlData.equipmentType,
        hazmat: ftlData.hazmat,
        teamDriver: ftlData.teamDriver,
        origin: ftlData.origin,
        destination: ftlData.destination,
        commodity: ftlData.commodity,
      },
    };

    console.log('✅ FTL Quote calculated:', quote);
    setPendingQuote(quote);
    setShowConfirmation(true);
  };

  const calculateSpecialized = () => {
    console.log('🔄 Calculating Specialized Quote...');
    const weight = parseFloat(specializedData.weight) || 0;
    const value = parseFloat(specializedData.value) || 0;

    let baseRate = weight * 1.2;
    if (specializedData.serviceType === 'White Glove') baseRate *= 1.5;
    else if (specializedData.serviceType === 'Inside Delivery') baseRate *= 1.3;
    else if (specializedData.serviceType === 'Liftgate') baseRate *= 1.2;

    const insuranceCost = value * 0.01;
    const fuelSurcharge = baseRate * 0.15;
    const total = baseRate + insuranceCost + fuelSurcharge;

    const quote = {
      id: Date.now().toString(),
      type: 'Specialized',
      quoteNumber: `SPC-${Date.now()}`,
      timestamp: Date.now(),
      baseRate: Math.round(baseRate),
      fuelSurcharge: Math.round(fuelSurcharge),
      total: Math.round(total),
      details: {
        serviceType: specializedData.serviceType,
        weight,
        value,
        dimensions: specializedData.dimensions,
        origin: specializedData.origin,
        destination: specializedData.destination,
        specialRequirements: specializedData.specialRequirements,
      },
    };

    console.log('✅ Specialized Quote calculated:', quote);
    setPendingQuote(quote);
    setShowConfirmation(true);
  };

  const calculateWarehousing = () => {
    console.log('🔄 Calculating Warehousing Quote...');
    const palletCount = parseInt(warehousingData.palletCount) || 0;
    const duration = parseInt(warehousingData.duration) || 1;

    let baseRate = palletCount * 25 * duration;
    if (warehousingData.serviceType === 'Cross-Dock') baseRate *= 0.8;
    else if (warehousingData.serviceType === 'Pick & Pack') baseRate *= 1.3;
    else if (warehousingData.serviceType === 'Kitting') baseRate *= 1.4;
    else if (warehousingData.serviceType === 'Distribution') baseRate *= 1.2;

    if (warehousingData.temperature === 'Cold Storage') baseRate *= 1.5;
    else if (warehousingData.temperature === 'Frozen') baseRate *= 2.0;

    const handlingFee = baseRate * 0.1;
    const total = baseRate + handlingFee;

    const quote = {
      id: Date.now().toString(),
      type: 'Warehousing',
      quoteNumber: `WH-${Date.now()}`,
      timestamp: Date.now(),
      baseRate: Math.round(baseRate),
      fuelSurcharge: Math.round(handlingFee),
      total: Math.round(total),
      details: {
        serviceType: warehousingData.serviceType,
        palletCount,
        duration,
        location: warehousingData.location,
        temperature: warehousingData.temperature,
      },
    };

    console.log('✅ Warehousing Quote calculated:', quote);
    setPendingQuote(quote);
    setShowConfirmation(true);
  };

  const calculateMultiService = () => {
    console.log('🔄 Calculating Multi-Service Quote...');

    if (multiServiceData.selectedServices.length === 0) {
      alert('Please select at least one service');
      return;
    }

    if (!multiServiceData.commonOrigin || !multiServiceData.commonDestination) {
      alert('Please enter origin and destination');
      return;
    }

    const totalWeight = parseFloat(multiServiceData.totalWeight) || 0;
    let totalBaseRate = 0;
    const serviceBreakdown: any[] = [];

    // Calculate individual service costs
    multiServiceData.selectedServices.forEach((service) => {
      let serviceCost = 0;

      switch (service) {
        case 'LTL':
          serviceCost = totalWeight * 0.85;
          break;
        case 'FTL':
          serviceCost = 500; // Base FTL cost
          break;
        case 'Warehousing':
          serviceCost = Math.ceil(totalWeight / 1000) * 25; // $25 per 1000 lbs
          break;
        case 'Specialized':
          serviceCost = totalWeight * 1.2;
          break;
        default:
          serviceCost = totalWeight * 0.5; // Default rate
      }

      totalBaseRate += serviceCost;
      serviceBreakdown.push({
        service,
        cost: Math.round(serviceCost),
      });
    });

    // Apply multi-service discount (5% for 2+ services)
    const discount =
      multiServiceData.selectedServices.length >= 2 ? totalBaseRate * 0.05 : 0;
    const discountedRate = totalBaseRate - discount;
    const fuelSurcharge = discountedRate * 0.15;
    const total = discountedRate + fuelSurcharge;

    const quote = {
      id: Date.now().toString(),
      type: 'Multi-Service',
      quoteNumber: `MS-${Date.now()}`,
      timestamp: Date.now(),
      baseRate: Math.round(discountedRate),
      fuelSurcharge: Math.round(fuelSurcharge),
      total: Math.round(total),
      discount: Math.round(discount),
      serviceBreakdown,
      details: {
        selectedServices: multiServiceData.selectedServices,
        commonOrigin: multiServiceData.commonOrigin,
        commonDestination: multiServiceData.commonDestination,
        totalWeight,
        notes: multiServiceData.notes,
      },
    };

    console.log('✅ Multi-Service Quote calculated:', quote);
    setPendingQuote(quote);
    setShowConfirmation(true);
  };

  // Quote Acceptance Workflow Functions
  const initializeQuoteAcceptanceWorkflow = (quote: any, shipper: any) => {
    const workflow = businessWorkflowManager.initializeQuoteAcceptanceWorkflow(
      quote.id,
      'broker-001', // Current broker ID
      shipper.id,
      {
        ...quote,
        shipper: shipper,
      }
    );

    setQuoteAcceptanceWorkflow(workflow);
    return workflow;
  };

  const handleQuoteAcceptance = async (quote: any, shipper: any) => {
    // Initialize workflow
    const workflow = initializeQuoteAcceptanceWorkflow(quote, shipper);

    // Complete initial steps
    await businessWorkflowManager.completeBusinessStep(
      workflow.id,
      'quote_generated',
      quote,
      'broker-001'
    );

    await businessWorkflowManager.completeBusinessStep(
      workflow.id,
      'quote_sent_to_shipper',
      { sentAt: new Date().toISOString() },
      'broker-001'
    );

    await businessWorkflowManager.completeBusinessStep(
      workflow.id,
      'quote_reviewed_by_shipper',
      { reviewedAt: new Date().toISOString() },
      shipper.id
    );

    await businessWorkflowManager.completeBusinessStep(
      workflow.id,
      'quote_accepted_by_shipper',
      { acceptedAt: new Date().toISOString() },
      shipper.id
    );

    // Show acceptance modal with shipper creation options
    setSelectedAcceptedQuote({ ...quote, shipper, workflowId: workflow.id });
    setWorkflowForShipperCreation(workflow);
    setShowQuoteAcceptance(true);
  };

  const generateBrokerShipperAgreement = async (acceptedQuote: any) => {
    setContractGenerationStatus('generating');

    try {
      // Complete contract generation step
      await businessWorkflowManager.completeBusinessStep(
        acceptedQuote.workflowId,
        'contract_generation_triggered',
        { triggeredAt: new Date().toISOString() },
        'broker-001'
      );

      // Use existing broker contract system with pre-filled data
      const contractData = {
        clientName: acceptedQuote.shipper.name,
        clientEmail: acceptedQuote.shipper.email,
        clientPhone: acceptedQuote.shipper.phone,
        services: acceptedQuote.services || [acceptedQuote.type],
        rates: acceptedQuote.rates,
        terms: 'Standard Broker-Shipper Agreement',
        status: 'pending_signature',
        quoteReference: acceptedQuote.quoteNumber,
        generatedFromQuote: true,
      };

      // Navigate to existing broker contracts page with pre-filled data
      window.location.href = `/broker/contracts?prefill=${encodeURIComponent(JSON.stringify(contractData))}`;

      setContractGenerationStatus('sent');
    } catch (error) {
      console.error('Error generating contract:', error);
      setContractGenerationStatus('error');
    }
  };

  const confirmQuote = () => {
    if (pendingQuote) {
      setQuotes((prev) => [pendingQuote, ...prev]);
      console.log('✅ Quote confirmed and saved!');
      setShowConfirmation(false);
      setPendingQuote(null);
    }
  };

  useEffect(() => {
    // Auto-create demo broker session (no login required)
    const demoSession = {
      id: 'broker-demo-001',
      brokerCode: 'DEMO001',
      brokerName: 'Demo Broker',
      email: 'demo@fleetflow.com',
      role: 'broker',
      loginTime: new Date().toISOString(),
    };

    localStorage.setItem('brokerSession', JSON.stringify(demoSession));
    setBrokerSession(demoSession);
  }, []);

  // 🔗 LOAD UNIFIED QUOTES: Load quotes generated from the unified quoting system
  useEffect(() => {
    if (brokerSession?.id) {
      const brokerQuotesKey = `broker-quotes-${brokerSession.id}`;
      const unifiedQuotes = localStorage.getItem(brokerQuotesKey);
      if (unifiedQuotes) {
        try {
          const parsedQuotes = JSON.parse(unifiedQuotes);
          // Merge unified quotes with existing broker quotes
          setQuotes((prevQuotes) => {
            const existingIds = prevQuotes.map((q) => q.id);
            const newQuotes = parsedQuotes.filter(
              (q: any) => !existingIds.includes(q.id)
            );
            return [...newQuotes, ...prevQuotes];
          });
          console.log('🎯 Loaded unified quotes for broker:', {
            broker: brokerSession.brokerName,
            count: parsedQuotes.length,
          });
        } catch (error) {
          console.error('Error loading unified quotes:', error);
        }
      }
    }
  }, [brokerSession]);

  const handleLogout = () => {
    localStorage.removeItem('brokerSession');
    router.push('/broker');
  };

  const handleLoadCreated = (load: Load) => {
    console.log('New load created:', load);
    setShowCreateForm(false);
    // Refresh the load board by switching tabs and back
    setSelectedTab('bids');
    setTimeout(() => setSelectedTab('loads'), 100);
  };

  // Get shippers assigned to this broker
  const myShippers = shippers.filter(
    (shipper: any) =>
      shipper.assignedBrokerId === brokerSession?.id ||
      shipper.assignedBrokerId === brokerSession?.brokerCode
  );

  if (!brokerSession) {
    return (
      <div
        style={{
          backgroundImage: `
          linear-gradient(135deg, #0f172a 0%, #1e293b 25%, #334155 50%, #1e293b 75%, #0f172a 100%),
          radial-gradient(circle at 20% 20%, rgba(59, 130, 246, 0.08) 0%, transparent 50%),
          radial-gradient(circle at 80% 80%, rgba(99, 102, 241, 0.06) 0%, transparent 50%),
          radial-gradient(circle at 40% 60%, rgba(168, 85, 247, 0.04) 0%, transparent 50%)
        `,
          backgroundSize: '100% 100%, 800px 800px, 600px 600px, 400px 400px',
          backgroundPosition: '0 0, 0 0, 100% 100%, 50% 50%',
          minHeight: '100vh',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          fontFamily:
            '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif',
        }}
      >
        <div
          style={{
            backgroundColor: 'rgba(255, 255, 255, 0.15)',
            backdropFilter: 'blur(10px)',
            borderRadius: '16px',
            padding: '32px',
            border: '1px solid rgba(255, 255, 255, 0.2)',
            color: 'white',
            fontSize: '18px',
            textAlign: 'center',
            boxShadow: '0 8px 32px rgba(0, 0, 0, 0.1)',
          }}
        >
          🔐 Verifying broker credentials...
        </div>
      </div>
    );
  }

  // const currentDispatcher = availableDispatchers.find(
  //   (d) => d.id === brokerSession.id.replace('broker-', 'disp-')
  // );

  // Add function to handle shipper creation mode selection
  const handleShipperCreationMode = (mode: 'manual' | 'automated') => {
    setShipperCreationMode(mode);
    setShowQuoteAcceptance(false);

    if (mode === 'automated') {
      // Show existing AddShipperForm for automated creation
      setShowShipperCreation(true);
    } else {
      // Proceed directly to contract generation for manual creation
      generateBrokerShipperAgreement(selectedAcceptedQuote);
    }
  };

  // Add function to handle shipper form submission
  const handleShipperFormSubmit = async (shipperData: any) => {
    try {
      // Complete shipper information collection step
      await businessWorkflowManager.completeBusinessStep(
        workflowForShipperCreation.id,
        'shipper_information_collected',
        shipperData,
        'shipper'
      );

      // Complete shipper verification step (auto-approved for demo)
      await businessWorkflowManager.completeBusinessStep(
        workflowForShipperCreation.id,
        'shipper_verified',
        {
          creditApproved: true,
          creditLimit: 50000,
          verificationNotes: 'Auto-approved for demo',
          verifiedBy: 'broker-001',
        },
        'broker-001'
      );

      // Create shipper in system
      const result = await businessWorkflowManager.createShipperInSystem(
        workflowForShipperCreation.id,
        shipperData
      );

      if (result.success) {
        setShowShipperCreation(false);
        // Proceed to contract generation
        generateBrokerShipperAgreement(selectedAcceptedQuote);
      }
    } catch (error) {
      console.error('Error in shipper creation workflow:', error);
    }
  };

  return (
    <div
      style={{
        minHeight: '100vh',
        background: 'linear-gradient(135deg, #1e293b 0%, #334155 100%)',
        padding: '20px',
      }}
    >
      <div
        style={{
          minHeight: '100vh',
          backgroundImage: `
          linear-gradient(135deg, #0f172a 0%, #1e293b 25%, #334155 50%, #1e293b 75%, #0f172a 100%),
          radial-gradient(circle at 20% 20%, rgba(59, 130, 246, 0.08) 0%, transparent 50%),
          radial-gradient(circle at 80% 80%, rgba(99, 102, 241, 0.06) 0%, transparent 50%),
          radial-gradient(circle at 40% 60%, rgba(168, 85, 247, 0.04) 0%, transparent 50%)
        `,
          backgroundSize: '100% 100%, 800px 800px, 600px 600px, 400px 400px',
          backgroundPosition: '0 0, 0 0, 100% 100%, 50% 50%',
          fontFamily:
            '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif',
        }}
      >
        {/* Back Button */}
        <div style={{ padding: '16px 24px' }}>
          <Link href='/'>
            <button
              style={{
                background: 'rgba(255, 255, 255, 0.1)',
                color: 'white',
                border: '1px solid rgba(255, 255, 255, 0.2)',
                padding: '8px 16px',
                borderRadius: '8px',
                fontSize: '14px',
                fontWeight: '500',
                cursor: 'pointer',
                transition: 'all 0.3s ease',
                backdropFilter: 'blur(10px)',
              }}
              onMouseOver={(e) => {
                e.currentTarget.style.background = 'rgba(255, 255, 255, 0.2)';
                e.currentTarget.style.transform = 'translateY(-2px)';
                e.currentTarget.style.boxShadow =
                  '0 8px 25px rgba(0, 0, 0, 0.2)';
              }}
              onMouseOut={(e) => {
                e.currentTarget.style.background = 'rgba(255, 255, 255, 0.1)';
                e.currentTarget.style.transform = 'translateY(0)';
                e.currentTarget.style.boxShadow = 'none';
              }}
            >
              <span style={{ marginRight: '8px' }}>←</span>
              Back to Dashboard
            </button>
          </Link>
        </div>

        {/* Main Container */}
        <div
          style={{
            maxWidth: '1400px',
            margin: '0 auto',
            padding: '0 24px 32px',
          }}
        >
          {/* Header */}
          <div
            style={{
              background: 'rgba(255, 255, 255, 0.15)',
              backdropFilter: 'blur(10px)',
              borderRadius: '16px',
              padding: '32px',
              marginBottom: '32px',
              border: '1px solid rgba(255, 255, 255, 0.2)',
              boxShadow: '0 8px 32px rgba(0, 0, 0, 0.1)',
            }}
          >
            <div
              style={{
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'space-between',
              }}
            >
              <div
                style={{ display: 'flex', alignItems: 'center', gap: '24px' }}
              >
                <div
                  style={{
                    padding: '16px',
                    background: 'rgba(255, 255, 255, 0.2)',
                    borderRadius: '12px',
                  }}
                >
                  <span style={{ fontSize: '32px' }}>👤</span>
                </div>
                <div>
                  <h1
                    style={{
                      fontSize: '36px',
                      fontWeight: 'bold',
                      color: 'white',
                      margin: '0 0 8px 0',
                      textShadow: '0 4px 8px rgba(0,0,0,0.3)',
                    }}
                  >
                    Brokerage Portal
                  </h1>
                  <p
                    style={{
                      color: 'rgba(255, 255, 255, 0.8)',
                      fontSize: '18px',
                      margin: '0 0 16px 0',
                    }}
                  >
                    Professional freight brokerage & customer relationship
                    management
                  </p>
                  <div
                    style={{
                      display: 'flex',
                      alignItems: 'center',
                      gap: '24px',
                    }}
                  >
                    <div
                      style={{
                        display: 'flex',
                        alignItems: 'center',
                        gap: '8px',
                      }}
                    >
                      <div
                        style={{
                          width: '12px',
                          height: '12px',
                          background: '#10b981',
                          borderRadius: '50%',
                          boxShadow: '0 0 0 0 rgba(16, 185, 129, 0.7)',
                          animation: 'pulse 2s infinite',
                        }}
                      />
                      <span
                        style={{
                          color: 'rgba(255, 255, 255, 0.9)',
                          fontSize: '14px',
                        }}
                      >
                        Agent Portal Active
                      </span>
                    </div>
                    <div
                      style={{
                        color: 'rgba(255, 255, 255, 0.7)',
                        fontSize: '14px',
                      }}
                    >
                      Agent: {brokerSession.brokerName} | Code:{' '}
                      {brokerSession.brokerCode}
                    </div>
                  </div>
                </div>
              </div>
              <div style={{ display: 'flex', gap: '12px' }}>
                <button
                  style={{
                    background: 'rgba(255, 255, 255, 0.2)',
                    color: 'white',
                    border: '1px solid rgba(255, 255, 255, 0.2)',
                    padding: '12px 24px',
                    borderRadius: '12px',
                    fontSize: '14px',
                    fontWeight: '600',
                    cursor: 'pointer',
                    transition: 'all 0.3s ease',
                    backdropFilter: 'blur(10px)',
                  }}
                  onMouseOver={(e) => {
                    e.currentTarget.style.background =
                      'rgba(255, 255, 255, 0.3)';
                    e.currentTarget.style.transform = 'translateY(-2px)';
                    e.currentTarget.style.boxShadow =
                      '0 8px 25px rgba(0, 0, 0, 0.2)';
                  }}
                  onMouseOut={(e) => {
                    e.currentTarget.style.background =
                      'rgba(255, 255, 255, 0.2)';
                    e.currentTarget.style.transform = 'translateY(0)';
                    e.currentTarget.style.boxShadow = 'none';
                  }}
                >
                  ⚙️ Settings
                </button>
                <button
                  onClick={handleLogout}
                  style={{
                    background: 'linear-gradient(135deg, #ef4444, #dc2626)',
                    color: 'white',
                    border: 'none',
                    padding: '12px 24px',
                    borderRadius: '12px',
                    fontSize: '14px',
                    fontWeight: '600',
                    cursor: 'pointer',
                    transition: 'all 0.3s ease',
                  }}
                  onMouseOver={(e) => {
                    e.currentTarget.style.background =
                      'linear-gradient(135deg, #dc2626, #b91c1c)';
                    e.currentTarget.style.transform = 'translateY(-2px)';
                    e.currentTarget.style.boxShadow =
                      '0 8px 25px rgba(0, 0, 0, 0.2)';
                  }}
                  onMouseOut={(e) => {
                    e.currentTarget.style.background =
                      'linear-gradient(135deg, #ef4444, #dc2626)';
                    e.currentTarget.style.transform = 'translateY(0)';
                    e.currentTarget.style.boxShadow = 'none';
                  }}
                >
                  🚪 Logout
                </button>
              </div>
            </div>
          </div>

          {/* Stats Cards */}
          <div
            style={{
              display: 'grid',
              gridTemplateColumns: 'repeat(auto-fit, minmax(280px, 1fr))',
              gap: '24px',
              marginBottom: '32px',
            }}
          >
            <div
              style={{
                background: 'rgba(255, 255, 255, 0.15)',
                backdropFilter: 'blur(10px)',
                borderRadius: '16px',
                padding: '24px',
                border: '1px solid rgba(255, 255, 255, 0.2)',
                boxShadow: '0 8px 32px rgba(0, 0, 0, 0.1)',
              }}
            >
              <div
                style={{ display: 'flex', alignItems: 'center', gap: '16px' }}
              >
                <div
                  style={{
                    padding: '12px',
                    background: 'rgba(59, 130, 246, 0.2)',
                    borderRadius: '12px',
                  }}
                >
                  <span style={{ fontSize: '24px' }}>👥</span>
                </div>
                <div>
                  <div
                    style={{
                      color: 'rgba(255, 255, 255, 0.7)',
                      fontSize: '14px',
                    }}
                  >
                    Active Shippers
                  </div>
                  <div
                    style={{
                      color: 'white',
                      fontSize: '32px',
                      fontWeight: 'bold',
                    }}
                  >
                    {performanceMetrics?.customerCount || 0}
                  </div>
                </div>
              </div>
            </div>

            <div
              style={{
                background: 'rgba(255, 255, 255, 0.15)',
                backdropFilter: 'blur(10px)',
                borderRadius: '16px',
                padding: '24px',
                border: '1px solid rgba(255, 255, 255, 0.2)',
                boxShadow: '0 8px 32px rgba(0, 0, 0, 0.1)',
              }}
            >
              <div
                style={{ display: 'flex', alignItems: 'center', gap: '16px' }}
              >
                <div
                  style={{
                    padding: '12px',
                    background: 'rgba(16, 185, 129, 0.2)',
                    borderRadius: '12px',
                  }}
                >
                  <span style={{ fontSize: '24px' }}>📦</span>
                </div>
                <div>
                  <div
                    style={{
                      color: 'rgba(255, 255, 255, 0.7)',
                      fontSize: '14px',
                    }}
                  >
                    Active Loads
                  </div>
                  <div
                    style={{
                      color: 'white',
                      fontSize: '32px',
                      fontWeight: 'bold',
                    }}
                  >
                    {performanceMetrics?.activeLoads || 0}
                  </div>
                </div>
              </div>
            </div>

            <div
              style={{
                background: 'rgba(255, 255, 255, 0.15)',
                backdropFilter: 'blur(10px)',
                borderRadius: '16px',
                padding: '24px',
                border: '1px solid rgba(255, 255, 255, 0.2)',
                boxShadow: '0 8px 32px rgba(0, 0, 0, 0.1)',
              }}
            >
              <div
                style={{ display: 'flex', alignItems: 'center', gap: '16px' }}
              >
                <div
                  style={{
                    padding: '12px',
                    background: 'rgba(245, 158, 11, 0.2)',
                    borderRadius: '12px',
                  }}
                >
                  <span style={{ fontSize: '24px' }}>💰</span>
                </div>
                <div>
                  <div
                    style={{
                      color: 'rgba(255, 255, 255, 0.7)',
                      fontSize: '14px',
                    }}
                  >
                    Monthly Revenue
                  </div>
                  <div
                    style={{
                      color: 'white',
                      fontSize: '32px',
                      fontWeight: 'bold',
                    }}
                  >
                    ${performanceMetrics?.totalRevenue?.toLocaleString() || '0'}
                  </div>
                </div>
              </div>
            </div>

            <div
              style={{
                background: 'rgba(255, 255, 255, 0.15)',
                backdropFilter: 'blur(10px)',
                borderRadius: '16px',
                padding: '24px',
                border: '1px solid rgba(255, 255, 255, 0.2)',
                boxShadow: '0 8px 32px rgba(0, 0, 0, 0.1)',
              }}
            >
              <div
                style={{ display: 'flex', alignItems: 'center', gap: '16px' }}
              >
                <div
                  style={{
                    padding: '12px',
                    background: 'rgba(139, 92, 246, 0.2)',
                    borderRadius: '12px',
                  }}
                >
                  <span style={{ fontSize: '24px' }}>📊</span>
                </div>
                <div>
                  <div
                    style={{
                      color: 'rgba(255, 255, 255, 0.7)',
                      fontSize: '14px',
                    }}
                  >
                    Success Rate
                  </div>
                  <div
                    style={{
                      color: 'white',
                      fontSize: '32px',
                      fontWeight: 'bold',
                    }}
                  >
                    {performanceMetrics?.winRate || 0}%
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Navigation Tabs */}
          <div style={{ display: 'flex', gap: '8px', marginBottom: '32px' }}>
            {[
              {
                id: 'operations-hub',
                label: 'Operations Hub',
                icon: '🏢',
                color: 'linear-gradient(135deg, #3b82f6, #2563eb)',
              }, // OPERATIONS - Blue
              {
                {
                  id: 'carrier-management',
                  label: 'Carrier Management',
                  icon: '🚛',
                  color: 'linear-gradient(135deg, #14b8a6, #0d9488)',
                }, // CARRIER MANAGEMENT - Teal              {
                {
                  id: 'business-intelligence',
                  label: 'Business Intelligence',
                  icon: '📊',
                  color: 'linear-gradient(135deg, #6366f1, #4f46e5)',
                }, // BUSINESS INTELLIGENCE - Purple