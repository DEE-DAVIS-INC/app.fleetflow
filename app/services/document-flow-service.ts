// Document Flow Management Service
// Ensures all information flows correctly between routing, drivers, shippers, brokers, dispatchers, invoices, rate confirmations, and BOLs

import { Load } from './loadService';
import { CarrierData, carrierService } from './enhanced-carrier-service';
import { smsService } from './sms';

export interface DocumentPackage {
  loadId: string;
  routeDocument?: string;
  rateConfirmation?: string;
  billOfLading?: string;
  invoice?: string;
  trackingInfo?: string;
  carrierInfo?: CarrierData;
  
  // Document status tracking
  documentsGenerated: {
    route: boolean;
    rateConfirmation: boolean;
    billOfLading: boolean;
    invoice: boolean;
  };
  
  // Communication tracking
  sentTo: {
    driver?: { phone: string; timestamp: string; status: 'sent' | 'delivered' | 'failed' };
    carrier?: { phone: string; email?: string; timestamp: string; status: 'sent' | 'delivered' | 'failed' };
    shipper?: { email: string; timestamp: string; status: 'sent' | 'delivered' | 'failed' };
    broker?: { email: string; timestamp: string; status: 'sent' | 'delivered' | 'failed' };
  };
}

export class DocumentFlowService {
  private documentStore: Map<string, DocumentPackage> = new Map();

  // Initialize document package for a load
  initializeDocumentPackage(load: Load): DocumentPackage {
    const packageData: DocumentPackage = {
      loadId: load.id,
      documentsGenerated: {
        route: false,
        rateConfirmation: false,
        billOfLading: false,
        invoice: false
      },
      sentTo: {}
    };

    this.documentStore.set(load.id, packageData);
    return packageData;
  }

  // Generate Rate Confirmation
  generateRateConfirmation(load: Load, carrier: CarrierData): string {
    const currentDate = new Date().toLocaleDateString();
    
    const rateConfirmation = `
RATE CONFIRMATION
Load ID: ${load.id}
Date: ${currentDate}

═══════════════════════════════════════════════════════════

BROKER INFORMATION
Company: ${load.brokerName}
Contact: Dispatch Department
Phone: (555) 123-4567

SHIPPER INFORMATION
${load.shipperInfo ? `
Company: ${load.shipperInfo.companyName}
Contact: ${load.shipperInfo.contactName}
Phone: ${load.shipperInfo.phone}
Email: ${load.shipperInfo.email}
Address: ${load.shipperInfo.address}
         ${load.shipperInfo.city}, ${load.shipperInfo.state} ${load.shipperInfo.zipCode}
${load.shipperInfo.specialInstructions ? `Special Instructions: ${load.shipperInfo.specialInstructions}` : ''}
` : 'Shipper information to be provided'}

CARRIER INFORMATION
Company: ${carrier.companyName}
MC Number: ${carrier.mcNumber}
DOT Number: ${carrier.dotNumber}
Phone: ${carrier.phone}
Safety Rating: ${carrier.safetyRating}

LOAD DETAILS
Origin: ${load.origin}
Destination: ${load.destination}
Pickup Date: ${load.pickupDate}
Delivery Date: ${load.deliveryDate}
Equipment: ${load.equipment}
Weight: ${load.weight}
Distance: ${load.distance}

RATE INFORMATION
Total Rate: $${load.rate.toLocaleString()}
Rate per Mile: $${(load.rate / parseFloat(load.distance.replace(' mi', ''))).toFixed(2)}
Payment Terms: ${load.shipperInfo?.paymentTerms || 'Net 30 Days'}

SPECIAL INSTRUCTIONS
${load.specialInstructions || 'Standard delivery requirements'}

This rate confirmation constitutes a binding agreement between shipper and carrier.

Carrier Signature: ______________________ Date: __________

Generated by FleetFlow Document Management System
    `.trim();

    // Update document package
    const packageData = this.documentStore.get(load.id);
    if (packageData) {
      packageData.rateConfirmation = rateConfirmation;
      packageData.documentsGenerated.rateConfirmation = true;
      packageData.carrierInfo = carrier;
    }

    return rateConfirmation;
  }

  // Generate Bill of Lading
  generateBillOfLading(load: Load, carrier: CarrierData): string {
    const currentDate = new Date().toLocaleDateString();
    const bolNumber = `BOL-${load.id}-${Date.now()}`;
    
    const billOfLading = `
BILL OF LADING
BOL Number: ${bolNumber}
Date: ${currentDate}

═══════════════════════════════════════════════════════════

BROKER
${load.brokerName}
Dispatch Department
Phone: (555) 123-4567

SHIPPER
${load.shipperInfo ? `
${load.shipperInfo.companyName}
${load.shipperInfo.contactName}
${load.shipperInfo.address}
${load.shipperInfo.city}, ${load.shipperInfo.state} ${load.shipperInfo.zipCode}
Phone: ${load.shipperInfo.phone}
Email: ${load.shipperInfo.email}
` : 'Shipper details to be provided'}

CONSIGNEE
Delivery Location
${load.destination}

CARRIER
${carrier.companyName}
MC: ${carrier.mcNumber} | DOT: ${carrier.dotNumber}
Phone: ${carrier.phone}

SHIPMENT DETAILS
Load ID: ${load.id}
Origin: ${load.origin}
Destination: ${load.destination}
Pickup Date: ${load.pickupDate}
Delivery Date: ${load.deliveryDate}

COMMODITY DESCRIPTION
Equipment Type: ${load.equipment}
Weight: ${load.weight}
Pieces: TBD
Description: General Freight

SPECIAL INSTRUCTIONS
${load.specialInstructions || 'Handle with care. Standard delivery requirements.'}
${load.shipperInfo?.specialInstructions ? `Shipper Instructions: ${load.shipperInfo.specialInstructions}` : ''}

CHARGES
Freight Charges: $${load.rate.toLocaleString()}
Payment Terms: ${load.shipperInfo?.paymentTerms || 'Net 30 Days'}

SIGNATURES
Shipper: ______________________ Date: __________
Carrier: ______________________ Date: __________
Consignee: ____________________ Date: __________

This document constitutes a contract of carriage and receipt of goods.

Generated by FleetFlow Document Management System
    `.trim();

    // Update document package
    const packageData = this.documentStore.get(load.id);
    if (packageData) {
      packageData.billOfLading = billOfLading;
      packageData.documentsGenerated.billOfLading = true;
    }

    return billOfLading;
  }

  // Generate Invoice
  generateInvoice(load: Load, carrier: CarrierData): string {
    const currentDate = new Date().toLocaleDateString();
    const invoiceNumber = `INV-${load.id}-${Date.now()}`;
    const dueDate = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toLocaleDateString();
    
    const invoice = `
INVOICE
Invoice Number: ${invoiceNumber}
Date: ${currentDate}
Due Date: ${dueDate}

═══════════════════════════════════════════════════════════

BILL TO
${carrier.companyName}
${carrier.physicalAddress}
Phone: ${carrier.phone}
MC: ${carrier.mcNumber} | DOT: ${carrier.dotNumber}

FROM
${load.brokerName}
Freight Brokerage Services
Phone: (555) 123-4567

SERVICES PROVIDED
Load ID: ${load.id}
Service: Freight Transportation
Route: ${load.origin} → ${load.destination}
Service Date: ${load.pickupDate}
Equipment: ${load.equipment}
Distance: ${load.distance}

PAYMENT DETAILS
Freight Charges: $${load.rate.toLocaleString()}
Fuel Surcharge: $0.00
Other Charges: $0.00
─────────────────────────────
Total Amount Due: $${load.rate.toLocaleString()}

PAYMENT TERMS
Net 30 Days
Payment Method: ACH Transfer Preferred
Late Fee: 1.5% per month on overdue amounts

REMIT PAYMENT TO
FleetFlow Financial Services
Account: [Banking Information]
Reference: ${invoiceNumber}

Thank you for your business!

Generated by FleetFlow Document Management System
    `.trim();

    // Update document package
    const packageData = this.documentStore.get(load.id);
    if (packageData) {
      packageData.invoice = invoice;
      packageData.documentsGenerated.invoice = true;
    }

    return invoice;
  }

  // Send complete document package to all parties
  async sendCompleteDocumentPackage(loadId: string, options: {
    driverPhone?: string;
    carrierPhone?: string;
    carrierEmail?: string;
    shipperEmail?: string;
    brokerEmail?: string;
  }): Promise<{
    success: boolean;
    results: Array<{
      recipient: string;
      type: 'sms' | 'email';
      status: 'sent' | 'failed';
      message?: string;
    }>;
  }> {
    const packageData = this.documentStore.get(loadId);
    if (!packageData) {
      return { success: false, results: [{ recipient: 'system', type: 'sms', status: 'failed', message: 'Document package not found' }] };
    }

    const results: Array<{
      recipient: string;
      type: 'sms' | 'email';
      status: 'sent' | 'failed';
      message?: string;
    }> = [];

    // Send route document to driver via SMS
    if (options.driverPhone && packageData.routeDocument) {
      try {
        const loadData = {
          id: loadId,
          origin: 'TBD',
          destination: 'TBD',
          rate: '$0',
          pickupDate: new Date().toISOString(),
          equipment: 'Various'
        };
        
        const recipients = [{
          id: 'driver-1',
          name: 'Driver',
          phone: options.driverPhone,
          type: 'driver' as const
        }];

        const smsResult = await smsService.sendCustomMessage(
          loadData,
          recipients,
          `🗺️ ROUTE DOCUMENT\nLoad: ${loadId}\n\n${packageData.routeDocument.substring(0, 500)}...\n\nFull document available in driver portal.`
        );
        
        results.push({
          recipient: options.driverPhone,
          type: 'sms',
          status: smsResult.summary.sent > 0 ? 'sent' : 'failed',
          message: smsResult.summary.sent > 0 ? 'SMS sent successfully' : 'SMS failed to send'
        });

        if (smsResult.summary.sent > 0) {
          packageData.sentTo.driver = {
            phone: options.driverPhone,
            timestamp: new Date().toISOString(),
            status: 'sent'
          };
        }
      } catch (error) {
        results.push({
          recipient: options.driverPhone,
          type: 'sms',
          status: 'failed',
          message: 'SMS sending failed'
        });
      }
    }

    // Send documents to carrier via SMS/Email
    if (options.carrierPhone && (packageData.rateConfirmation || packageData.billOfLading)) {
      try {
        const documents = [
          packageData.rateConfirmation ? 'Rate Confirmation' : null,
          packageData.billOfLading ? 'Bill of Lading' : null,
          packageData.invoice ? 'Invoice' : null
        ].filter(Boolean).join(', ');

        const carrierLoadData = {
          id: loadId,
          origin: 'TBD',
          destination: 'TBD',
          rate: '$0',
          pickupDate: new Date().toISOString(),
          equipment: 'Various'
        };
        
        const carrierRecipients = [{
          id: 'carrier-1',
          name: 'Carrier',
          phone: options.carrierPhone,
          type: 'carrier' as const
        }];

        const smsResult = await smsService.sendCustomMessage(
          carrierLoadData,
          carrierRecipients,
          `📋 LOAD DOCUMENTS\nLoad: ${loadId}\nDocuments: ${documents}\n\nFull documents sent to your email. Please confirm receipt.`
        );
        
        results.push({
          recipient: options.carrierPhone,
          type: 'sms',
          status: smsResult.summary.sent > 0 ? 'sent' : 'failed',
          message: smsResult.summary.sent > 0 ? 'SMS sent successfully' : 'SMS failed to send'
        });

        if (smsResult.summary.sent > 0) {
          packageData.sentTo.carrier = {
            phone: options.carrierPhone,
            email: options.carrierEmail,
            timestamp: new Date().toISOString(),
            status: 'sent'
          };
        }
      } catch (error) {
        results.push({
          recipient: options.carrierPhone,
          type: 'sms',
          status: 'failed',
          message: 'SMS sending failed'
        });
      }
    }

    // TODO: Implement email sending for complete document packages
    // This would include PDF attachments for all generated documents

    return {
      success: results.some(r => r.status === 'sent'),
      results
    };
  }

  // Get document package status
  getDocumentPackageStatus(loadId: string): DocumentPackage | null {
    return this.documentStore.get(loadId) || null;
  }

  // Get all document packages (for admin dashboard)
  getAllDocumentPackages(): DocumentPackage[] {
    return Array.from(this.documentStore.values());
  }

  // Update tracking information
  updateTrackingInfo(loadId: string, trackingInfo: string): void {
    const packageData = this.documentStore.get(loadId);
    if (packageData) {
      packageData.trackingInfo = trackingInfo;
    }
  }
}

// Export singleton instance
export const documentFlowService = new DocumentFlowService();
