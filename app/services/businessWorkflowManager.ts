// 🔄 FleetFlow Business Workflow Management System
// Handles business workflows like quote acceptance, contract generation, invoice approval
// Complements the existing operational workflow system for driver/load operations

import { logger } from '../utils/logger';

export interface BusinessWorkflowStep {
  id: string;
  name: string;
  description: string;
  required: boolean;
  completed: boolean;
  completedAt?: string;
  completedBy?: string;
  data?: any;
  allowOverride?: boolean;
  overrideReason?: string;
  overrideBy?: string;
}

export interface BusinessWorkflow {
  id: string;
  type:
    | 'quote_acceptance'
    | 'contract_generation'
    | 'invoice_approval'
    | 'payment_processing'
    | 'compliance_review'
    | 'load_assignment'
    | 'carrier_onboarding'
    | 'shipper_onboarding';
  status:
    | 'pending'
    | 'in_progress'
    | 'completed'
    | 'cancelled'
    | 'override_required';
  currentStep: number;
  steps: BusinessWorkflowStep[];
  createdAt: string;
  updatedAt: string;
  metadata?: any;
}

export type BusinessWorkflowStepId =
  // Quote Acceptance Workflow
  | 'quote_generated'
  | 'quote_sent_to_shipper'
  | 'quote_reviewed_by_shipper'
  | 'quote_accepted_by_shipper'
  | 'shipper_information_collected'
  | 'shipper_verified'
  | 'contract_generation_triggered'
  | 'contract_sent_to_shipper'
  | 'contract_signed_by_shipper'
  | 'contract_signed_by_broker'
  | 'shipper_created'
  | 'relationship_established'

  // Invoice Approval Workflow
  | 'invoice_created'
  | 'invoice_submitted_for_approval'
  | 'invoice_reviewed_by_management'
  | 'invoice_approved'
  | 'invoice_sent_to_customer'
  | 'payment_received'

  // Payment Processing Workflow
  | 'payment_initiated'
  | 'payment_processed'
  | 'payment_confirmed'
  | 'payment_distributed'

  // Compliance Review Workflow
  | 'compliance_document_submitted'
  | 'compliance_reviewed'
  | 'compliance_approved'
  | 'compliance_documentation_complete'

  // Load Assignment Workflow
  | 'load_created'
  | 'load_assigned_to_carrier'
  | 'carrier_confirmed_assignment'
  | 'load_authorized_for_pickup'
  | 'load_in_transit'
  | 'load_delivered'

  // Carrier Onboarding Workflow
  | 'carrier_application_submitted'
  | 'carrier_credentials_verified'
  | 'carrier_insurance_verified'
  | 'carrier_contract_signed'
  | 'carrier_portal_access_granted'
  | 'carrier_onboarding_complete'

  // Shipper Onboarding Workflow
  | 'shipper_application_submitted'
  | 'shipper_credit_verified'
  | 'shipper_contract_signed'
  | 'shipper_portal_access_granted'
  | 'shipper_onboarding_complete';

class BusinessWorkflowManager {
  private workflows: Map<string, BusinessWorkflow> = new Map();

  /**
   * Initialize Quote Acceptance Workflow
   */
  initializeQuoteAcceptanceWorkflow(
    quoteId: string,
    brokerId: string,
    shipperId: string,
    quoteData: any
  ): BusinessWorkflow {
    const workflow: BusinessWorkflow = {
      id: `QA-${quoteId}`,
      type: 'quote_acceptance',
      status: 'pending',
      currentStep: 0,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      metadata: {
        quoteId,
        brokerId,
        shipperId,
        quoteData,
      },
      steps: [
        {
          id: 'quote_generated',
          name: 'Quote Generated',
          description: 'Freight quote has been generated by broker',
          required: true,
          completed: true,
          completedAt: new Date().toISOString(),
          completedBy: brokerId,
        },
        {
          id: 'quote_sent_to_shipper',
          name: 'Quote Sent to Shipper',
          description: 'Quote has been sent to shipper for review',
          required: true,
          completed: false,
        },
        {
          id: 'quote_reviewed_by_shipper',
          name: 'Quote Reviewed by Shipper',
          description: 'Shipper has reviewed the quote details',
          required: true,
          completed: false,
        },
        {
          id: 'quote_accepted_by_shipper',
          name: 'Quote Accepted by Shipper',
          description: 'Shipper has accepted the quote terms',
          required: true,
          completed: false,
        },
        {
          id: 'shipper_information_collected',
          name: 'Shipper Information Collected',
          description: 'Shipper has provided all required company information',
          required: true,
          completed: false,
          data: {
            requiredFields: [
              'companyName',
              'contactName',
              'email',
              'phone',
              'address',
              'city',
              'state',
              'zipCode',
              'taxId',
              'creditTerms',
              'paymentMethod',
              'preferredCarriers',
              'serviceTypes',
              'specialRequirements',
            ],
          },
        },
        {
          id: 'shipper_verified',
          name: 'Shipper Information Verified',
          description: 'Broker has verified shipper information and credit',
          required: true,
          completed: false,
        },
        {
          id: 'contract_generation_triggered',
          name: 'Contract Generation Triggered',
          description: 'Broker-shipper agreement generation initiated',
          required: true,
          completed: false,
        },
        {
          id: 'contract_sent_to_shipper',
          name: 'Contract Sent to Shipper',
          description: 'Broker-shipper agreement sent to shipper for review',
          required: true,
          completed: false,
        },
        {
          id: 'contract_signed_by_shipper',
          name: 'Contract Signed by Shipper',
          description: 'Shipper has signed the broker-shipper agreement',
          required: true,
          completed: false,
        },
        {
          id: 'contract_signed_by_broker',
          name: 'Contract Signed by Broker',
          description: 'Broker has signed the broker-shipper agreement',
          required: true,
          completed: false,
        },
        {
          id: 'shipper_created',
          name: 'Shipper Created in System',
          description: 'New shipper record created in FleetFlow system',
          required: true,
          completed: false,
        },
        {
          id: 'relationship_established',
          name: 'Business Relationship Established',
          description: 'Broker-shipper relationship is now active',
          required: true,
          completed: false,
        },
      ],
    };

    this.workflows.set(workflow.id, workflow);
    logger.info(
      'Quote Acceptance Workflow initialized',
      { workflowId: workflow.id },
      'BusinessWorkflowManager'
    );
    return workflow;
  }

  /**
   * Complete a business workflow step
   */
  async completeBusinessStep(
    workflowId: string,
    stepId: BusinessWorkflowStepId,
    data?: any,
    completedBy?: string
  ): Promise<{
    success: boolean;
    error?: string;
    workflow?: BusinessWorkflow;
  }> {
    const workflow = this.workflows.get(workflowId);
    if (!workflow) {
      return { success: false, error: 'Workflow not found' };
    }

    const stepIndex = workflow.steps.findIndex((step) => step.id === stepId);
    if (stepIndex === -1) {
      return { success: false, error: 'Step not found' };
    }

    const step = workflow.steps[stepIndex];
    if (step.completed) {
      return { success: false, error: 'Step already completed' };
    }

    // Mark step as completed
    step.completed = true;
    step.completedAt = new Date().toISOString();
    step.completedBy = completedBy;
    step.data = data;

    // Update workflow current step
    workflow.currentStep = stepIndex + 1;
    workflow.updatedAt = new Date().toISOString();

    // Check if workflow is complete
    const allStepsCompleted = workflow.steps.every((s) => s.completed);
    if (allStepsCompleted) {
      workflow.status = 'completed';
    } else {
      workflow.status = 'in_progress';
    }

    // Update workflow in memory
    this.workflows.set(workflowId, workflow);

    // Trigger notifications
    await this.triggerBusinessStepNotifications(workflowId, stepId, workflow);

    logger.info(
      'Business workflow step completed',
      {
        stepId,
        workflowId,
        completedBy: completedBy,
      },
      'BusinessWorkflowManager'
    );
    return { success: true, workflow };
  }

  /**
   * Get business workflow
   */
  getBusinessWorkflow(workflowId: string): BusinessWorkflow | null {
    return this.workflows.get(workflowId) || null;
  }

  /**
   * Get current step for a business workflow
   */
  getCurrentBusinessStep(workflowId: string): BusinessWorkflowStep | null {
    const workflow = this.getBusinessWorkflow(workflowId);
    if (!workflow) return null;

    return workflow.steps[workflow.currentStep] || null;
  }

  /**
   * Get business workflow progress percentage
   */
  getBusinessWorkflowProgress(workflowId: string): number {
    const workflow = this.getBusinessWorkflow(workflowId);
    if (!workflow) return 0;

    const completedSteps = workflow.steps.filter((s) => s.completed).length;
    return Math.round((completedSteps / workflow.steps.length) * 100);
  }

  /**
   * Trigger notifications for business workflow steps
   */
  private async triggerBusinessStepNotifications(
    workflowId: string,
    stepId: BusinessWorkflowStepId,
    workflow: BusinessWorkflow
  ) {
    const notifications = {
      quote_generated: async () => {
        console.info(`📋 Quote generated: ${workflowId}`);
      },
      quote_sent_to_shipper: async () => {
        console.info(`📧 Quote sent to shipper: ${workflowId}`);
      },
      quote_reviewed_by_shipper: async () => {
        console.info(`👀 Quote reviewed by shipper: ${workflowId}`);
      },
      quote_accepted_by_shipper: async () => {
        console.info(`📧 Quote accepted by shipper: ${workflowId}`);
        // Trigger contract generation
        await this.triggerContractGeneration(workflow);
      },
      shipper_information_collected: async () => {
        console.info(`📝 Shipper information collected: ${workflowId}`);
      },
      shipper_verified: async () => {
        console.info(`✅ Shipper information verified: ${workflowId}`);
      },
      contract_generation_triggered: async () => {
        console.info(`📋 Contract generation triggered: ${workflowId}`);
        // Navigate to contract system
        this.navigateToContractSystem(workflow);
      },
      contract_sent_to_shipper: async () => {
        console.info(`📧 Contract sent to shipper: ${workflowId}`);
      },
      contract_signed_by_shipper: async () => {
        console.info(`✍️ Contract signed by shipper: ${workflowId}`);
        // Notify broker to sign
        this.notifyBrokerToSign(workflow);
      },
      contract_signed_by_broker: async () => {
        console.info(`✍️ Contract signed by broker: ${workflowId}`);
        // Establish relationship
        await this.establishBusinessRelationship(workflow);
      },
      shipper_created: async () => {
        console.info(`🏢 Shipper created in system: ${workflowId}`);
      },
      relationship_established: async () => {
        console.info(`🤝 Business relationship established: ${workflowId}`);
        // Complete onboarding
        this.completeOnboarding(workflow);
      },
    };

    const notificationFn = notifications[stepId as keyof typeof notifications];
    if (notificationFn) {
      await notificationFn();
    }
  }

  /**
   * Trigger contract generation
   */
  private async triggerContractGeneration(workflow: BusinessWorkflow) {
    const { quoteData, shipperId } = workflow.metadata;

    // Navigate to broker contracts page with pre-filled data
    const contractData = {
      clientName: quoteData.shipper?.name || 'Shipper',
      clientEmail: quoteData.shipper?.email || '',
      clientPhone: quoteData.shipper?.phone || '',
      services: quoteData.services || [quoteData.type],
      rates: quoteData.rates,
      terms: 'Standard Broker-Shipper Agreement',
      status: 'pending_signature',
      quoteReference: quoteData.quoteNumber,
      generatedFromQuote: true,
    };

    window.location.href = `/broker/contracts?prefill=${encodeURIComponent(JSON.stringify(contractData))}`;
  }

  /**
   * Navigate to contract system
   */
  private navigateToContractSystem(workflow: BusinessWorkflow) {
    // This would integrate with the existing contract system
    console.info('Navigating to contract system');
  }

  /**
   * Notify broker to sign contract
   */
  private notifyBrokerToSign(workflow: BusinessWorkflow) {
    console.info('Notifying broker to sign contract');
  }

  /**
   * Establish business relationship
   */
  private async establishBusinessRelationship(workflow: BusinessWorkflow) {
    console.info('Establishing business relationship');
  }

  /**
   * Complete onboarding
   */
  private completeOnboarding(workflow: BusinessWorkflow) {
    console.info('Completing onboarding process');
  }

  /**
   * Create new shipper in system
   */
  async createShipperInSystem(
    workflowId: string,
    shipperData: any
  ): Promise<{ success: boolean; shipperId?: string; error?: string }> {
    try {
      // Create shipper record in FleetFlow system
      const newShipper = {
        id: `SHP-${Date.now()}`,
        companyName: shipperData.companyName,
        contactName: shipperData.contactName,
        email: shipperData.email,
        phone: shipperData.phone,
        address: shipperData.address,
        city: shipperData.city,
        state: shipperData.state,
        zipCode: shipperData.zipCode,
        taxId: shipperData.taxId,
        creditTerms: shipperData.creditTerms,
        paymentMethod: shipperData.paymentMethod,
        preferredCarriers: shipperData.preferredCarriers,
        serviceTypes: shipperData.serviceTypes,
        specialRequirements: shipperData.specialRequirements,
        status: 'active',
        createdAt: new Date().toISOString(),
        assignedBrokerId: 'broker-001', // Current broker
        creditLimit: shipperData.creditLimit || 50000,
        creditApproved: shipperData.creditApproved || false,
      };

      // Save to localStorage for demo (in real app, save to database)
      const existingShippers = JSON.parse(
        localStorage.getItem('shippers') || '[]'
      );
      existingShippers.push(newShipper);
      localStorage.setItem('shippers', JSON.stringify(existingShippers));

      await this.completeBusinessStep(
        workflowId,
        'shipper_created',
        newShipper,
        'system'
      );

      console.info(`✅ New shipper created: ${newShipper.id}`);
      return { success: true, shipperId: newShipper.id };
    } catch (error) {
      console.error('Error creating shipper:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error',
      };
    }
  }
}

// Export singleton instance
export const businessWorkflowManager = new BusinessWorkflowManager();

// React hook for business workflow management
import { useEffect, useState } from 'react';

export function useBusinessWorkflow(workflowId: string) {
  const [workflow, setWorkflow] = useState<BusinessWorkflow | null>(null);
  const [currentStep, setCurrentStep] = useState<BusinessWorkflowStep | null>(
    null
  );
  const [progress, setProgress] = useState<number>(0);

  useEffect(() => {
    const businessWorkflow =
      businessWorkflowManager.getBusinessWorkflow(workflowId);
    setWorkflow(businessWorkflow);

    if (businessWorkflow) {
      setCurrentStep(
        businessWorkflowManager.getCurrentBusinessStep(workflowId)
      );
      setProgress(
        businessWorkflowManager.getBusinessWorkflowProgress(workflowId)
      );
    }
  }, [workflowId]);

  const completeStep = async (
    stepId: BusinessWorkflowStepId,
    data?: any,
    completedBy?: string
  ) => {
    const result = await businessWorkflowManager.completeBusinessStep(
      workflowId,
      stepId,
      data,
      completedBy
    );

    if (result.success && result.workflow) {
      setWorkflow(result.workflow);
      setCurrentStep(
        businessWorkflowManager.getCurrentBusinessStep(workflowId)
      );
      setProgress(
        businessWorkflowManager.getBusinessWorkflowProgress(workflowId)
      );
    }

    return result;
  };

  return {
    workflow,
    currentStep,
    progress,
    completeStep,
  };
}
