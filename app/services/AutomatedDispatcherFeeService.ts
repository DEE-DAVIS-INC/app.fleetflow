/**
 * Automated Dispatcher Fee Tracking System
 * Auto-generates invoices when loads complete with embedded document verification
 */

export interface DispatcherFeeTracking {
  loadId: string;
  loadBoardNumber: string; // Simple 6-digit for phone reference

  // Fee Structure
  grossRevenue: number;
  dispatcherFeePercentage: number; // Default 10%, can be overridden
  dispatcherFeeAmount: number;
  netCarrierPayment: number;

  // Document References (Auto-linked)
  rateConfirmationNumber: string;
  bolNumber: string;
  proNumber?: string;

  // Auto-Generation Triggers
  loadCompletedAt: string;
  invoiceAutoGeneratedAt: string;
  invoiceNumber: string;

  // Verification System
  documentsEmbedded: {
    rateConfirmation: {
      documentId: string;
      verified: boolean;
      verifiedAt?: string;
      verifiedBy?: string;
    };
    bol: {
      documentId: string;
      verified: boolean;
      verifiedAt?: string;
      verifiedBy?: string;
    };
  };

  // Payment Tracking
  invoiceStatus: 'auto_generated' | 'verified' | 'sent' | 'paid' | 'overdue';
  paymentDueDate: string;
  paidAt?: string;

  // Carrier Information
  carrierMC: string;
  carrierName: string;
  dispatcherUserId: string;
  dispatcherInitials: string;
}

export interface AutoInvoiceTemplate {
  invoiceNumber: string;
  loadReference: {
    loadId: string;
    loadBoardNumber: string;
    route: string;
    completedDate: string;
  };

  // Embedded Document Links (Clickable)
  documentReferences: {
    rateConfirmation: {
      number: string;
      clickableLink: string; // Opens document overlay
      status: 'verified' | 'pending_verification';
    };
    bol: {
      number: string;
      clickableLink: string;
      status: 'verified' | 'pending_verification';
    };
  };

  // Fee Breakdown
  feeCalculation: {
    grossRevenue: number;
    feePercentage: number;
    feeAmount: number;
    netCarrierPayment: number;
  };

  // Auto-Generated Content
  generatedAt: string;
  requiresApproval: boolean;
  approvalRequired: 'none' | 'management_review' | 'document_verification';
}

export class AutomatedDispatcherFeeService {
  /**
   * Auto-generate invoice when load status changes to "Delivered"
   */
  static async onLoadCompleted(
    loadId: string,
    loadData: any,
    documentPackage: any
  ): Promise<DispatcherFeeTracking> {
    console.log(
      `ðŸš› Load ${loadId} completed - Auto-generating dispatcher fee invoice...`
    );

    // Calculate dispatcher fee (default 10%)
    const grossRevenue = loadData.rate || 0;
    const feePercentage = this.getDispatcherFeePercentage(loadData);
    const feeAmount = grossRevenue * (feePercentage / 100);
    const netCarrierPayment = grossRevenue - feeAmount;

    // Get document references
    const rateConfNumber =
      documentPackage.rateConfirmation?.documentNumber ||
      this.generateRateConfNumber(loadId);
    const bolNumber =
      documentPackage.bol?.documentNumber || this.generateBOLNumber(loadId);

    // Generate invoice automatically
    const invoiceNumber = this.generateInvoiceNumber(
      loadId,
      loadData.dispatcherInitials
    );

    const feeTracking: DispatcherFeeTracking = {
      loadId,
      loadBoardNumber: loadData.loadBoardNumber,

      // Fee Calculation
      grossRevenue,
      dispatcherFeePercentage: feePercentage,
      dispatcherFeeAmount: feeAmount,
      netCarrierPayment,

      // Document References
      rateConfirmationNumber: rateConfNumber,
      bolNumber: bolNumber,
      proNumber: documentPackage.pro?.documentNumber,

      // Auto-Generation
      loadCompletedAt: new Date().toISOString(),
      invoiceAutoGeneratedAt: new Date().toISOString(),
      invoiceNumber,

      // Document Verification Status
      documentsEmbedded: {
        rateConfirmation: {
          documentId: documentPackage.rateConfirmation?.documentId || '',
          verified: false, // Pending verification
        },
        bol: {
          documentId: documentPackage.bol?.documentId || '',
          verified: false, // Pending verification
        },
      },

      // Payment Tracking
      invoiceStatus: 'auto_generated',
      paymentDueDate: this.calculatePaymentDueDate(),

      // Carrier Info
      carrierMC: loadData.carrierMC || '',
      carrierName: loadData.carrierName || '',
      dispatcherUserId: loadData.dispatcherId || '',
      dispatcherInitials: loadData.dispatcherInitials || '',
    };

    // Store fee tracking record
    await this.storeFeeTracking(feeTracking);

    // Generate auto-invoice
    const autoInvoice = await this.generateAutoInvoice(feeTracking);

    // Send notification to management for approval (if required)
    await this.notifyManagementIfRequired(feeTracking, autoInvoice);

    console.log(
      `âœ… Auto-invoice ${invoiceNumber} generated for load ${loadId}`
    );

    return feeTracking;
  }

  /**
   * Generate smart auto-invoice with embedded document links
   */
  static async generateAutoInvoice(
    feeTracking: DispatcherFeeTracking
  ): Promise<AutoInvoiceTemplate> {
    const autoInvoice: AutoInvoiceTemplate = {
      invoiceNumber: feeTracking.invoiceNumber,

      loadReference: {
        loadId: feeTracking.loadId,
        loadBoardNumber: feeTracking.loadBoardNumber,
        route: await this.getLoadRoute(feeTracking.loadId),
        completedDate: feeTracking.loadCompletedAt,
      },

      // Clickable Document References
      documentReferences: {
        rateConfirmation: {
          number: feeTracking.rateConfirmationNumber,
          clickableLink: `/api/documents/view/${feeTracking.documentsEmbedded.rateConfirmation.documentId}`,
          status: 'pending_verification',
        },
        bol: {
          number: feeTracking.bolNumber,
          clickableLink: `/api/documents/view/${feeTracking.documentsEmbedded.bol.documentId}`,
          status: 'pending_verification',
        },
      },

      // Fee Breakdown
      feeCalculation: {
        grossRevenue: feeTracking.grossRevenue,
        feePercentage: feeTracking.dispatcherFeePercentage,
        feeAmount: feeTracking.dispatcherFeeAmount,
        netCarrierPayment: feeTracking.netCarrierPayment,
      },

      generatedAt: new Date().toISOString(),
      requiresApproval: this.requiresManagementApproval(feeTracking),
      approvalRequired: this.getApprovalLevel(feeTracking),
    };

    // Store auto-invoice
    await this.storeAutoInvoice(autoInvoice);

    return autoInvoice;
  }

  /**
   * Handle document verification when user clicks document number
   */
  static async verifyDocumentFromInvoice(
    invoiceNumber: string,
    documentType: 'rateConfirmation' | 'bol',
    verifiedByUserId: string
  ): Promise<{
    documentContent: any;
    verificationStatus: 'verified' | 'discrepancy_found';
    nextAction: 'approve_invoice' | 'flag_for_review';
  }> {
    // Get fee tracking record
    const feeTracking = await this.getFeeTrackingByInvoice(invoiceNumber);

    // Get document content
    const documentId = feeTracking.documentsEmbedded[documentType].documentId;
    const documentContent = await this.getDocumentContent(documentId);

    // Auto-verify document data against invoice
    const verification = await this.autoVerifyDocument(
      documentContent,
      feeTracking,
      documentType
    );

    // Update verification status
    feeTracking.documentsEmbedded[documentType].verified = verification.isValid;
    feeTracking.documentsEmbedded[documentType].verifiedAt =
      new Date().toISOString();
    feeTracking.documentsEmbedded[documentType].verifiedBy = verifiedByUserId;

    await this.updateFeeTracking(feeTracking);

    // Check if all documents are verified
    const allVerified = Object.values(feeTracking.documentsEmbedded).every(
      (doc) => doc.verified
    );

    if (allVerified && verification.isValid) {
      // Auto-approve invoice
      await this.autoApproveInvoice(invoiceNumber);
    }

    return {
      documentContent,
      verificationStatus: verification.isValid
        ? 'verified'
        : 'discrepancy_found',
      nextAction: allVerified ? 'approve_invoice' : 'flag_for_review',
    };
  }

  /**
   * Auto-verify document data matches invoice calculations
   */
  private static async autoVerifyDocument(
    documentContent: any,
    feeTracking: DispatcherFeeTracking,
    documentType: string
  ): Promise<{ isValid: boolean; discrepancies: string[] }> {
    const discrepancies: string[] = [];

    if (documentType === 'rateConfirmation') {
      // Verify rate matches
      if (documentContent.totalRate !== feeTracking.grossRevenue) {
        discrepancies.push(
          `Rate mismatch: Document shows $${documentContent.totalRate}, Invoice shows $${feeTracking.grossRevenue}`
        );
      }

      // Verify load ID matches
      if (documentContent.loadId !== feeTracking.loadId) {
        discrepancies.push(
          `Load ID mismatch: Document ${documentContent.loadId} vs Invoice ${feeTracking.loadId}`
        );
      }
    }

    if (documentType === 'bol') {
      // Verify delivery confirmation
      if (!documentContent.deliveryConfirmed) {
        discrepancies.push('BOL not showing delivery confirmation');
      }

      // Verify signatures present
      if (
        !documentContent.driverSignature ||
        !documentContent.receiverSignature
      ) {
        discrepancies.push('Missing required signatures on BOL');
      }
    }

    return {
      isValid: discrepancies.length === 0,
      discrepancies,
    };
  }

  /**
   * Get dispatcher fee percentage (can be customized per load/carrier)
   */
  private static getDispatcherFeePercentage(loadData: any): number {
    // Check for custom fee percentage
    if (loadData.customDispatcherFee) {
      return loadData.customDispatcherFee;
    }

    // Check carrier-specific rates
    if (loadData.carrierMC) {
      const carrierRate = this.getCarrierSpecificRate(loadData.carrierMC);
      if (carrierRate) return carrierRate;
    }

    // Default 10%
    return 10;
  }

  private static getCarrierSpecificRate(carrierMC: string): number | null {
    // Carrier-specific rates (can be configured)
    const carrierRates: Record<string, number> = {
      'MC-123456': 8, // Volume discount
      'MC-789012': 12, // Premium service
      // Add more as needed
    };

    return carrierRates[carrierMC] || null;
  }

  private static generateInvoiceNumber(
    loadId: string,
    dispatcherInitials: string
  ): string {
    const date = new Date().toISOString().slice(0, 10).replace(/-/g, '');
    const sequence = Math.floor(Math.random() * 999)
      .toString()
      .padStart(3, '0');
    return `INV-${dispatcherInitials}-${date}-${sequence}`;
  }

  private static generateRateConfNumber(loadId: string): string {
    return `RC-${loadId}-${Date.now().toString().slice(-6)}`;
  }

  private static generateBOLNumber(loadId: string): string {
    return `BOL-${loadId}-${Date.now().toString().slice(-6)}`;
  }

  private static calculatePaymentDueDate(): string {
    // Default: 7 days from invoice generation
    const dueDate = new Date();
    dueDate.setDate(dueDate.getDate() + 7);
    return dueDate.toISOString();
  }

  private static requiresManagementApproval(
    feeTracking: DispatcherFeeTracking
  ): boolean {
    // Require approval for high-value loads or custom rates
    return (
      feeTracking.grossRevenue > 5000 ||
      feeTracking.dispatcherFeePercentage !== 10
    );
  }

  private static getApprovalLevel(
    feeTracking: DispatcherFeeTracking
  ): 'none' | 'management_review' | 'document_verification' {
    if (feeTracking.grossRevenue > 10000) {
      return 'management_review';
    }
    if (feeTracking.dispatcherFeePercentage !== 10) {
      return 'document_verification';
    }
    return 'none';
  }

  // Storage methods (implement based on your database)
  private static async storeFeeTracking(
    feeTracking: DispatcherFeeTracking
  ): Promise<void> {
    console.log('Storing fee tracking:', feeTracking);
  }

  private static async storeAutoInvoice(
    autoInvoice: AutoInvoiceTemplate
  ): Promise<void> {
    console.log('Storing auto-invoice:', autoInvoice);
  }

  private static async getFeeTrackingByInvoice(
    invoiceNumber: string
  ): Promise<DispatcherFeeTracking> {
    // Implementation would query database
    throw new Error('Not implemented');
  }

  private static async getDocumentContent(documentId: string): Promise<any> {
    // Implementation would retrieve document
    throw new Error('Not implemented');
  }

  private static async updateFeeTracking(
    feeTracking: DispatcherFeeTracking
  ): Promise<void> {
    console.log('Updating fee tracking:', feeTracking);
  }

  private static async autoApproveInvoice(
    invoiceNumber: string
  ): Promise<void> {
    console.log(`Auto-approving invoice: ${invoiceNumber}`);
  }

  private static async getLoadRoute(loadId: string): Promise<string> {
    // Implementation would get load route
    return 'Atlanta, GA â†’ Miami, FL';
  }

  private static async notifyManagementIfRequired(
    feeTracking: DispatcherFeeTracking,
    autoInvoice: AutoInvoiceTemplate
  ): Promise<void> {
    if (autoInvoice.requiresApproval) {
      console.log(
        `Notifying management for approval: ${autoInvoice.invoiceNumber}`
      );
    }
  }
}

export default AutomatedDispatcherFeeService;
