'use client';

import React, { useState, useEffect } from 'react';
import Link from 'next/link';
import { AuthService } from '../../services/auth';
import { DriverWorkflowService } from '../../services/driver-workflow';
import { GPSTrackingService } from '../../services/gps-tracking';
import { ELDIntegrationService } from '../../services/eld-integration';
import { CommunicationService } from '../../services/communication';
import { PerformanceAnalyticsService } from '../../services/performance-analytics';
import { PushNotificationService } from '../../services/push-notification';
import { DocumentManagementService } from '../../services/document-management';
import { OfflineModeService } from '../../services/offline-mode';
import { LiveGPSMap } from '../../components/LiveGPSMap';

// Workflow Step Modal Component
const WorkflowStepModal = ({ step, onClose, onComplete, driver }: { step: any, onClose: () => void, onComplete: () => void, driver: any }) => {
  const [loading, setLoading] = useState(false);
  const [photosUploaded, setPhotosUploaded] = useState(false);
  const [signature, setSignature] = useState('');
  const [notes, setNotes] = useState('');

  const handleComplete = async () => {
    setLoading(true);
    try {
      await DriverWorkflowService.completeStep(driver.id, step.id, {
        photos: photosUploaded,
        signature,
        notes,
        timestamp: new Date().toISOString()
      });
      onComplete();
    } catch (error) {
      console.error('Error completing step:', error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div style={{
      position: 'fixed',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      background: 'rgba(0, 0, 0, 0.8)',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      zIndex: 1000,
      backdropFilter: 'blur(10px)'
    }}>
      <div style={{
        background: 'rgba(255, 255, 255, 0.15)',
        backdropFilter: 'blur(20px)',
        borderRadius: '24px',
        padding: '32px',
        maxWidth: '600px',
        width: '90%',
        maxHeight: '90vh',
        overflowY: 'auto',
        border: '1px solid rgba(255, 255, 255, 0.2)',
        boxShadow: '0 20px 50px rgba(0, 0, 0, 0.3)'
      }}>
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '24px' }}>
          <h2 style={{ 
            color: 'white', 
            fontSize: '24px', 
            fontWeight: '700',
            margin: 0,
            textShadow: '0 2px 4px rgba(0,0,0,0.5)'
          }}>
            {step.title}
          </h2>
          <button
            onClick={onClose}
            style={{
              background: 'rgba(255, 255, 255, 0.2)',
              border: 'none',
              color: 'white',
              width: '40px',
              height: '40px',
              borderRadius: '50%',
              cursor: 'pointer',
              fontSize: '18px',
              fontWeight: 'bold',
              transition: 'all 0.3s ease'
            }}
            onMouseOver={(e) => {
              e.currentTarget.style.background = 'rgba(255, 255, 255, 0.3)';
            }}
            onMouseOut={(e) => {
              e.currentTarget.style.background = 'rgba(255, 255, 255, 0.2)';
            }}
          >
            √ó
          </button>
        </div>

        <div style={{ color: 'rgba(255, 255, 255, 0.9)', marginBottom: '24px', lineHeight: '1.6' }}>
          {step.description}
        </div>

        {step.requiresPhotos && (
          <div style={{ marginBottom: '24px' }}>
            <label style={{ 
              display: 'block', 
              color: 'white', 
              fontWeight: '600',
              marginBottom: '8px'
            }}>
              üì∏ Upload Photos
            </label>
            <input
              type="file""
              accept=""image/*""
              multiple
              onChange={() => setPhotosUploaded(true)}
              style={{
                width: '100%',
                padding: '12px',
                borderRadius: '12px',
                border: '1px solid rgba(255, 255, 255, 0.3)',
                background: 'rgba(255, 255, 255, 0.1)',
                color: 'white',
                fontSize: '14px'
              }}
            />
          </div>
        )}

        {step.requiresSignature && (
          <div style={{ marginBottom: '24px' }}>
            <label style={{ 
              display: 'block', 
              color: 'white', 
              fontWeight: '600',
              marginBottom: '8px'
            }}>
              ‚úçÔ∏è Digital Signature
            </label>
            <input
              type="text""
              placeholder="Type your full name to sign""
              value={signature}
              onChange={(e) => setSignature(e.target.value)}
              style={{
                width: '100%',
                padding: '12px',
                borderRadius: '12px',
                border: '1px solid rgba(255, 255, 255, 0.3)',
                background: 'rgba(255, 255, 255, 0.1)',
                color: 'white',
                fontSize: '14px'
              }}
            />
          </div>
        )}

        <div style={{ marginBottom: '24px' }}>
          <label style={{ 
            display: 'block', 
            color: 'white', 
            fontWeight: '600',
            marginBottom: '8px'
          }}>
            üìù Notes (Optional)
          </label>
          <textarea
            value={notes}
            onChange={(e) => setNotes(e.target.value)}
            placeholder="Add any additional notes or observations...""
            style={{
              width: '100%',
              padding: '12px',
              borderRadius: '12px',
              border: '1px solid rgba(255, 255, 255, 0.3)',
              background: 'rgba(255, 255, 255, 0.1)',
              color: 'white',
              fontSize: '14px',
              minHeight: '80px',
              resize: 'vertical'
            }}
          />
        </div>

        <div style={{ display: 'flex', gap: '16px', justifyContent: 'flex-end' }}>
          <button
            onClick={onClose}
            style={{
              background: 'rgba(255, 255, 255, 0.2)',
              color: 'white',
              padding: '12px 24px',
              borderRadius: '12px',
              border: 'none',
              fontWeight: '600',
              cursor: 'pointer',
              transition: 'all 0.3s ease'
            }}
            onMouseOver={(e) => {
              e.currentTarget.style.background = 'rgba(255, 255, 255, 0.3)';
            }}
            onMouseOut={(e) => {
              e.currentTarget.style.background = 'rgba(255, 255, 255, 0.2)';
            }}
          >
            Cancel
          </button>
          <button
            onClick={handleComplete}
            disabled={loading}
            style={{
              background: loading ? 'rgba(255, 255, 255, 0.3)' : 'linear-gradient(135deg, #10b981, #059669)',
              color: 'white',
              padding: '12px 24px',
              borderRadius: '12px',
              border: 'none',
              fontWeight: '600',
              cursor: loading ? 'not-allowed' : 'pointer',
              transition: 'all 0.3s ease',
              opacity: loading ? 0.6 : 1
            }}
            onMouseOver={(e) => {
              if (!loading) {
                e.currentTarget.style.transform = 'translateY(-2px)';
                e.currentTarget.style.boxShadow = '0 8px 25px rgba(0, 0, 0, 0.2)';
              }
            }}
            onMouseOut={(e) => {
              if (!loading) {
                e.currentTarget.style.transform = 'translateY(0)';
                e.currentTarget.style.boxShadow = 'none';
              }
            }}
          >
            {loading ? 'Processing...' : 'Complete Step'}
          </button>
        </div>
      </div>
    </div>
  );
};

export default function DriverDashboard() {
  const [activeView, setActiveView] = useState<'dashboard' | 'tracking' | 'communication' | 'performance'>('dashboard');
  const [driver, setDriver] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [currentLoad, setCurrentLoad] = useState<any>(null);
  const [workflowSteps, setWorkflowSteps] = useState<any[]>([]);
  const [gpsLocation, setGpsLocation] = useState<any>(null);
  const [eldData, setEldData] = useState<any>(null);
  const [messages, setMessages] = useState<any[]>([]);
  const [performanceMetrics, setPerformanceMetrics] = useState<any>(null);
  const [selectedStep, setSelectedStep] = useState<any>(null);
  const [showWorkflowModal, setShowWorkflowModal] = useState(false);
  const [notifications, setNotifications] = useState<any[]>([]);
  const [realTimeLocation, setRealTimeLocation] = useState<any>(null);

  useEffect(() => {
    let currentDriverId: any = null;

    const initializeDashboard = async () => {
      try {
        // Get current driver session
        const currentDriver = await AuthService.getCurrentDriver();
        if (!currentDriver) {
          window.location.href = '/drivers/login';
          return;
        }

        setDriver(currentDriver);
        currentDriverId = currentDriver.id;
        
        // Initialize all services
        await Promise.all([
          loadCurrentLoad(currentDriver.id),
          loadWorkflowSteps(currentDriver.id),
          loadGPSLocation(currentDriver.id),
          loadELDData(currentDriver.id),
          loadMessages(currentDriver.id),
          loadPerformanceMetrics(currentDriver.id),
          loadNotifications(currentDriver.id)
        ]);

        // Start real-time GPS tracking
        await GPSTrackingService.startTracking(currentDriver.id);

        // Start real-time updates
        startRealTimeUpdates(currentDriver.id);

      } catch (error) {
        console.error('Error initializing dashboard:', error);
      } finally {
        setLoading(false);
      }
    };

    // Real-time location update handler
    const handleLocationUpdate = (event: any) => {
      const { driverId, location } = event.detail;
      if (driverId === currentDriverId) {
        setRealTimeLocation(location);
      }
    };

    // Add event listener
    window.addEventListener('locationUpdate', handleLocationUpdate);

    // Initialize dashboard
    initializeDashboard();

    // Cleanup function
    return () => {
      // Remove event listeners
      window.removeEventListener('locationUpdate', handleLocationUpdate);
      
      // Stop GPS tracking
      if (currentDriverId) {
        GPSTrackingService.stopTracking(currentDriverId);
      }
    };
  }, []);

  const loadCurrentLoad = async (driverId: any) => {
    try {
      const load = await DriverWorkflowService.getCurrentLoad(driverId);
      setCurrentLoad(load);
    } catch (error) {
      console.error('Error loading current load:', error);
    }
  };

  const loadWorkflowSteps = async (driverId: any) => {
    try {
      const steps = await DriverWorkflowService.getWorkflowSteps(driverId);
      setWorkflowSteps(steps);
    } catch (error) {
      console.error('Error loading workflow steps:', error);
    }
  };

  const loadGPSLocation = async (driverId: any) => {
    try {
      const location = await GPSTrackingService.getCurrentLocation(driverId);
      setGpsLocation(location);
    } catch (error) {
      console.error('Error loading GPS location:', error);
    }
  };

  const loadELDData = async (driverId: any) => {
    try {
      const data = await ELDIntegrationService.getHoursOfService(driverId);
      setEldData(data);
    } catch (error) {
      console.error('Error loading ELD data:', error);
    }
  };

  const loadMessages = async (driverId: any) => {
    try {
      const msgs = await CommunicationService.getMessages(driverId);
      setMessages(msgs);
    } catch (error) {
      console.error('Error loading messages:', error);
    }
  };

  const loadPerformanceMetrics = async (driverId: any) => {
    try {
      const metrics = await PerformanceAnalyticsService.getMetrics(driverId);
      setPerformanceMetrics(metrics);
    } catch (error) {
      console.error('Error loading performance metrics:', error);
    }
  };

  const loadNotifications = async (driverId: any) => {
    try {
      const notifs = await PushNotificationService.getNotifications(driverId);
      setNotifications(notifs);
    } catch (error) {
      console.error('Error loading notifications:', error);
    }
  };

  const startRealTimeUpdates = (driverId: any) => {
    const interval = setInterval(async () => {
      try {
        const location = await GPSTrackingService.getCurrentLocation(driverId);
        setGpsLocation(location);
      } catch (error) {
        console.error('Error updating GPS location:', error);
      }
    }, 30000); // Update every 30 seconds

    return () => clearInterval(interval);
  };

  const handleWorkflowStepClick = (step: any) => {
    setSelectedStep(step);
    setShowWorkflowModal(true);
  };

  const handleWorkflowStepComplete = async () => {
    setShowWorkflowModal(false);
    if (driver) {
      await loadWorkflowSteps(driver.id);
    }
  };

  const handleLogout = async () => {
    await AuthService.logout();
    window.location.href = '/drivers/login';
  };

  if (loading) {
    return (
      <div style={{
        minHeight: '100vh',
        background: `
          linear-gradient(135deg, #1e293b 0%, #334155 25%, #475569 50%, #334155 75%, #1e293b 100%),
          radial-gradient(circle at 20% 20%, rgba(59, 130, 246, 0.08) 0%, transparent 50%),
          radial-gradient(circle at 80% 80%, rgba(168, 85, 247, 0.06) 0%, transparent 50%),
          radial-gradient(circle at 40% 60%, rgba(34, 197, 94, 0.04) 0%, transparent 50%)
        `,
        backgroundSize: '100% 100%, 800px 800px, 600px 600px, 400px 400px',
        backgroundPosition: '0 0, 0 0, 100% 100%, 50% 50%',
        backgroundAttachment: 'fixed',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center'
      }}>
        <div style={{
          background: 'rgba(255, 255, 255, 0.15)',
          backdropFilter: 'blur(10px)',
          borderRadius: '16px',
          padding: '32px',
          border: '1px solid rgba(255, 255, 255, 0.2)',
          boxShadow: '0 8px 32px rgba(0, 0, 0, 0.1)',
          textAlign: 'center'
        }}>
          <div style={{
            width: '40px',
            height: '40px',
            border: '4px solid rgba(255, 255, 255, 0.3)',
            borderTop: '4px solid #3b82f6',
            borderRadius: '50%',
            animation: 'spin 1s linear infinite',
            margin: '0 auto 16px'
          }} />
          <div style={{ color: 'white', fontSize: '18px', fontWeight: '600' }}>
            Loading Driver Dashboard...
          </div>
        </div>
      </div>
    );
  }

  return (
    <div style={{
      minHeight: '100vh',
      background: `
        linear-gradient(135deg, #1e293b 0%, #334155 25%, #475569 50%, #334155 75%, #1e293b 100%),
        radial-gradient(circle at 20% 20%, rgba(59, 130, 246, 0.08) 0%, transparent 50%),
        radial-gradient(circle at 80% 80%, rgba(168, 85, 247, 0.06) 0%, transparent 50%),
        radial-gradient(circle at 40% 60%, rgba(34, 197, 94, 0.04) 0%, transparent 50%)
      `,
      backgroundSize: '100% 100%, 800px 800px, 600px 600px, 400px 400px',
      backgroundPosition: '0 0, 0 0, 100% 100%, 50% 50%',
      backgroundAttachment: 'fixed',
      paddingTop: '80px',
      position: 'relative'
    }}>
      {/* Navigation Bar */}
      <div style={{
        position: 'fixed',
        top: 0,
        left: 0,
        right: 0,
        zIndex: 100,
        background: 'rgba(255, 255, 255, 0.15)',
        backdropFilter: 'blur(10px)',
        borderBottom: '1px solid rgba(255, 255, 255, 0.2)',
        padding: '16px 24px'
      }}>
      <div style={{
          maxWidth: '1400px',
        margin: '0 auto',
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center'
      }}>
          <div style={{ display: 'flex', alignItems: 'center', gap: '16px' }}>
        <div style={{
              padding: '8px',
              background: 'rgba(255, 255, 255, 0.2)',
              borderRadius: '8px'
            }}>
              <span style={{ fontSize: '24px' }}>üöõ</span>
            </div>
            <div>
              <div style={{
                color: 'white',
                fontSize: '18px',
                fontWeight: '700',
                textShadow: '0 2px 4px rgba(0,0,0,0.3)'
              }}>
                Driver Management Portal
          </div>
        <div style={{
                color: 'rgba(255, 255, 255, 0.8)',
                fontSize: '14px'
              }}>
                Welcome back, {driver?.name || 'Driver'}
                      </div>
                      </div>
                    </div>
          <div style={{ display: 'flex', alignItems: 'center', gap: '16px' }}>
                    <div style={{ 
              background: 'rgba(255, 255, 255, 0.2)',
              borderRadius: '8px',
              padding: '8px 12px',
                      color: 'white',
              fontSize: '14px'
                    }}>
              ID: {driver?.id || 'N/A'}
                    </div>
                    <button 
              onClick={handleLogout}
                      style={{
                background: 'rgba(255, 255, 255, 0.2)',
                        color: 'white',
                        padding: '8px 16px',
                        borderRadius: '8px',
                        border: 'none',
                fontWeight: '600',
                cursor: 'pointer',
                transition: 'all 0.3s ease'
              }}
              onMouseOver={(e) => {
                e.currentTarget.style.background = 'rgba(255, 255, 255, 0.3)';
              }}
              onMouseOut={(e) => {
                e.currentTarget.style.background = 'rgba(255, 255, 255, 0.2)';
              }}
            >
              Logout
                    </button>
          </div>
        </div>
      </div>

      {/* Main Container */}
      <div style={{
        maxWidth: '1400px',
        margin: '0 auto',
        padding: '0 24px 32px'
      }}>
        {/* Header */}
        <div style={{
          background: 'rgba(255, 255, 255, 0.15)',
          backdropFilter: 'blur(10px)',
          borderRadius: '16px',
          padding: '32px',
          marginBottom: '32px',
          border: '1px solid rgba(255, 255, 255, 0.2)',
          boxShadow: '0 8px 32px rgba(0, 0, 0, 0.1)'
        }}>
          <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
            <div style={{ display: 'flex', alignItems: 'center', gap: '24px' }}>
              <div style={{
                padding: '16px',
                background: 'rgba(255, 255, 255, 0.2)',
                borderRadius: '12px'
              }}>
                <span style={{ fontSize: '32px' }}>üöõ</span>
              </div>
              <div>
                <h1 style={{
                  fontSize: '36px',
                  fontWeight: 'bold',
                  color: 'white',
                  margin: '0 0 8px 0',
                  textShadow: '0 4px 8px rgba(0,0,0,0.3)'
                }}>
                  Driver Dashboard
                </h1>
                <p style={{
                  fontSize: '18px',
                  color: 'rgba(255, 255, 255, 0.9)',
                  margin: '0 0 8px 0'
                }}>
                  Real-time tracking, workflow management & performance analytics
                </p>
                <div style={{ display: 'flex', alignItems: 'center', gap: '24px' }}>
                  <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                    <div style={{
                      width: '12px',
                      height: '12px',
                      background: '#4ade80',
                      borderRadius: '50%',
                      animation: 'pulse 2s infinite'
                    }} />
                    <span style={{ fontSize: '14px', color: 'rgba(255, 255, 255, 0.8)' }}>
                      GPS Tracking Active
                    </span>
                  </div>
                  <span style={{ fontSize: '14px', color: 'rgba(255, 255, 255, 0.7)' }}>
                    Last updated: {new Date().toLocaleTimeString()}
                  </span>
                </div>
              </div>
            </div>
            <div style={{ display: 'flex', gap: '16px' }}>
                    <button 
                onClick={() => setActiveView('tracking')}
                      style={{
                  background: activeView === 'tracking' 
                    ? 'linear-gradient(135deg, #10b981, #059669)' 
                    : 'linear-gradient(135deg, #3b82f6, #1d4ed8)',
                        color: 'white',
                  padding: '12px 24px',
                  borderRadius: '12px',
                        border: 'none',
                  fontWeight: '600',
                        cursor: 'pointer',
                  fontSize: '16px',
                  transition: 'all 0.3s ease',
                  boxShadow: activeView === 'tracking' ? '0 8px 25px rgba(16, 185, 129, 0.4)' : 'none'
                }}
                onMouseOver={(e) => {
                  e.currentTarget.style.transform = 'translateY(-2px) scale(1.05)';
                  e.currentTarget.style.boxShadow = activeView === 'tracking' 
                    ? '0 12px 40px rgba(16, 185, 129, 0.5)' 
                    : '0 8px 25px rgba(59, 130, 246, 0.4)';
                }}
                onMouseOut={(e) => {
                  e.currentTarget.style.transform = 'translateY(0) scale(1)';
                  e.currentTarget.style.boxShadow = activeView === 'tracking' 
                    ? '0 8px 25px rgba(16, 185, 129, 0.4)' 
                    : 'none';
                }}
              >
                üìç Live Tracking {activeView === 'tracking' && '‚Ä¢ Active'}
                    </button>
            </div>
          </div>
        </div>

        {/* Navigation Tabs */}
        <div style={{
          background: 'rgba(255, 255, 255, 0.15)',
          backdropFilter: 'blur(10px)',
          borderRadius: '16px',
          padding: '16px',
          marginBottom: '32px',
          border: '1px solid rgba(255, 255, 255, 0.2)',
          boxShadow: '0 8px 32px rgba(0, 0, 0, 0.1)'
        }}>
          <div style={{ display: 'flex', gap: '8px' }}>
            {[
              { id: 'dashboard', label: 'üìä Overview', icon: 'üìä', color: 'rgba(59, 130, 246, 0.2)' },
              { id: 'tracking', label: 'üó∫Ô∏è Tracking', icon: 'üó∫Ô∏è', color: 'rgba(34, 197, 94, 0.2)' },
              { id: 'communication', label: 'üí¨ Messages', icon: 'üí¨', color: 'rgba(245, 158, 11, 0.2)' },
              { id: 'performance', label: 'üìà Performance', icon: 'üìà', color: 'rgba(168, 85, 247, 0.2)' }
            ].map((tab) => (
                    <button 
                key={tab.id}
                onClick={() => setActiveView(tab.id as any)}
                      style={{
                  padding: '12px 24px',
                  borderRadius: '12px',
                  fontWeight: '600',
                  transition: 'all 0.3s ease',
                        border: 'none',
                        cursor: 'pointer',
                  fontSize: '16px',
                  background: activeView === tab.id 
                    ? tab.color.replace('0.2)', '0.4)')
                    : tab.color,
                  color: 'white',
                  transform: activeView === tab.id ? 'translateY(-2px)' : 'translateY(0)',
                  boxShadow: activeView === tab.id ? '0 8px 25px rgba(0, 0, 0, 0.15)' : 'none'
                }}
                onMouseOver={(e) => {
                  if (activeView !== tab.id) {
                    e.currentTarget.style.background = tab.color.replace('0.2)', '0.5)');
                    e.currentTarget.style.transform = 'translateY(-4px) scale(1.05)';
                    e.currentTarget.style.boxShadow = `0 12px 40px ${tab.color.replace('0.2)', '0.4)')}, 0 8px 20px rgba(0, 0, 0, 0.3)`;
                    e.currentTarget.style.filter = 'brightness(1.1)';
                  }
                }}
                onMouseOut={(e) => {
                  if (activeView !== tab.id) {
                    e.currentTarget.style.background = tab.color;
                    e.currentTarget.style.transform = 'translateY(0) scale(1)';
                    e.currentTarget.style.boxShadow = 'none';
                    e.currentTarget.style.filter = 'brightness(1)';
                  }
                }}
              >
                <span style={{ marginRight: '8px' }}>{tab.icon}</span>
                {tab.label}
                    </button>
            ))}
                  </div>
                </div>

        {/* Dashboard View */}
        {activeView === 'dashboard' && (
          <div style={{ display: 'flex', flexDirection: 'column', gap: '32px' }}>
            {/* Stats Grid */}
            <div style={{
              display: 'grid',
              gridTemplateColumns: 'repeat(auto-fit, minmax(280px, 1fr))',
              gap: '16px'
            }}>
              <div style={{
                background: 'rgba(255, 255, 255, 0.15)',
                backdropFilter: 'blur(10px)',
                borderRadius: '16px',
                padding: '24px',
                border: '1px solid rgba(255, 255, 255, 0.2)',
                boxShadow: '0 8px 32px rgba(0, 0, 0, 0.1)',
                transition: 'all 0.3s ease'
              }}
              onMouseOver={(e) => {
                e.currentTarget.style.transform = 'translateY(-4px)';
                e.currentTarget.style.boxShadow = '0 12px 40px rgba(0, 0, 0, 0.2)';
              }}
              onMouseOut={(e) => {
                e.currentTarget.style.transform = 'translateY(0)';
                e.currentTarget.style.boxShadow = '0 8px 32px rgba(0, 0, 0, 0.1)';
              }}>
                <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                  <div>
                    <p style={{ fontSize: '16px', color: 'rgba(255, 255, 255, 0.7)', margin: '0 0 8px 0', fontWeight: '500' }}>
                      Current Load
                    </p>
                    <p style={{ fontSize: '24px', fontWeight: 'bold', color: 'white', margin: '0 0 4px 0' }}>
                      {currentLoad?.id || 'No Active Load'}
                    </p>
                    <p style={{ fontSize: '14px', color: '#4ade80', margin: 0 }}>
                      {currentLoad?.status || 'Available'}
                    </p>
                  </div>
                  <div style={{
                    padding: '16px',
                    background: 'rgba(59, 130, 246, 0.2)',
                    borderRadius: '12px'
                  }}>
                    <span style={{ fontSize: '28px' }}>üì¶</span>
            </div>
          </div>
        </div>

          <div style={{
                background: 'rgba(255, 255, 255, 0.15)',
                backdropFilter: 'blur(10px)',
                borderRadius: '16px',
                padding: '24px',
                border: '1px solid rgba(255, 255, 255, 0.2)',
                boxShadow: '0 8px 32px rgba(0, 0, 0, 0.1)',
                transition: 'all 0.3s ease'
              }}
              onMouseOver={(e) => {
                e.currentTarget.style.transform = 'translateY(-4px)';
                e.currentTarget.style.boxShadow = '0 12px 40px rgba(0, 0, 0, 0.2)';
              }}
              onMouseOut={(e) => {
                e.currentTarget.style.transform = 'translateY(0)';
                e.currentTarget.style.boxShadow = '0 8px 32px rgba(0, 0, 0, 0.1)';
              }}>
                <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                  <div>
                    <p style={{ fontSize: '16px', color: 'rgba(255, 255, 255, 0.7)', margin: '0 0 8px 0', fontWeight: '500' }}>
                      Hours of Service
                    </p>
                    <p style={{ fontSize: '24px', fontWeight: 'bold', color: 'white', margin: '0 0 4px 0' }}>
                      {eldData?.remainingHours || '11'} hrs
                    </p>
                    <p style={{ fontSize: '14px', color: '#4ade80', margin: 0 }}>
                      {eldData?.status || 'Available'}
                    </p>
                  </div>
            <div style={{
                    padding: '16px',
                    background: 'rgba(34, 197, 94, 0.2)',
                    borderRadius: '12px'
                  }}>
                    <span style={{ fontSize: '28px' }}>‚è∞</span>
              </div>
                </div>
              </div>
              
                <div style={{
                background: 'rgba(255, 255, 255, 0.15)',
                backdropFilter: 'blur(10px)',
                borderRadius: '16px',
                padding: '24px',
                border: '1px solid rgba(255, 255, 255, 0.2)',
                boxShadow: '0 8px 32px rgba(0, 0, 0, 0.1)',
                transition: 'all 0.3s ease'
              }}
              onMouseOver={(e) => {
                e.currentTarget.style.transform = 'translateY(-4px)';
                e.currentTarget.style.boxShadow = '0 12px 40px rgba(0, 0, 0, 0.2)';
              }}
              onMouseOut={(e) => {
                e.currentTarget.style.transform = 'translateY(0)';
                e.currentTarget.style.boxShadow = '0 8px 32px rgba(0, 0, 0, 0.1)';
              }}>
                <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                  <div>
                    <p style={{ fontSize: '16px', color: 'rgba(255, 255, 255, 0.7)', margin: '0 0 8px 0', fontWeight: '500' }}>
                      Current Location
                    </p>
                    <p style={{ fontSize: '24px', fontWeight: 'bold', color: 'white', margin: '0 0 4px 0' }}>
                      {gpsLocation?.city || 'Unknown'}
                    </p>
                    <p style={{ fontSize: '14px', color: '#4ade80', margin: 0 }}>
                      {gpsLocation?.accuracy || 'GPS Active'}
                    </p>
                    </div>
                  <div style={{
                    padding: '16px',
                    background: 'rgba(168, 85, 247, 0.2)',
                    borderRadius: '12px'
                  }}>
                    <span style={{ fontSize: '28px' }}>üìç</span>
                    </div>
                  </div>
                </div>
                
                <div style={{
                background: 'rgba(255, 255, 255, 0.15)',
                backdropFilter: 'blur(10px)',
                borderRadius: '16px',
                padding: '24px',
                border: '1px solid rgba(255, 255, 255, 0.2)',
                boxShadow: '0 8px 32px rgba(0, 0, 0, 0.1)',
                transition: 'all 0.3s ease'
              }}
              onMouseOver={(e) => {
                e.currentTarget.style.transform = 'translateY(-4px)';
                e.currentTarget.style.boxShadow = '0 12px 40px rgba(0, 0, 0, 0.2)';
              }}
              onMouseOut={(e) => {
                e.currentTarget.style.transform = 'translateY(0)';
                e.currentTarget.style.boxShadow = '0 8px 32px rgba(0, 0, 0, 0.1)';
              }}>
                <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
                  <div>
                    <p style={{ fontSize: '16px', color: 'rgba(255, 255, 255, 0.7)', margin: '0 0 8px 0', fontWeight: '500' }}>
                      Unread Messages
                    </p>
                    <p style={{ fontSize: '24px', fontWeight: 'bold', color: 'white', margin: '0 0 4px 0' }}>
                      {messages?.filter(m => !m.read).length || 0}
                    </p>
                    <p style={{ fontSize: '14px', color: '#4ade80', margin: 0 }}>
                      New messages
                    </p>
                    </div>
                  <div style={{
                    padding: '16px',
                    background: 'rgba(245, 158, 11, 0.2)',
                    borderRadius: '12px'
                  }}>
                    <span style={{ fontSize: '28px' }}>üí¨</span>
                    </div>
                  </div>
              </div>
                </div>
                
            {/* Workflow Steps */}
                <div style={{
              background: 'rgba(255, 255, 255, 0.15)',
              backdropFilter: 'blur(10px)',
              borderRadius: '16px',
              padding: '32px',
              border: '1px solid rgba(255, 255, 255, 0.2)',
              boxShadow: '0 8px 32px rgba(0, 0, 0, 0.1)'
            }}>
              <h2 style={{ fontSize: '24px', fontWeight: 'bold', color: 'white', margin: '0 0 24px 0' }}>
                üîÑ Current Workflow
              </h2>
              
              <div style={{ display: 'grid', gap: '16px' }}>
                {workflowSteps.map((step, index) => (
                  <div
                    key={step.id}
                    onClick={() => !step.completed && handleWorkflowStepClick(step)}
                    style={{
                      background: step.completed 
                        ? 'rgba(34, 197, 94, 0.2)' 
                        : step.current 
                        ? 'rgba(59, 130, 246, 0.2)' 
                        : 'rgba(255, 255, 255, 0.1)',
                  borderRadius: '12px',
                  padding: '20px',
                      border: `2px solid ${step.completed 
                        ? 'rgba(34, 197, 94, 0.4)' 
                        : step.current 
                        ? 'rgba(59, 130, 246, 0.4)' 
                        : 'rgba(255, 255, 255, 0.2)'}`,
                      cursor: step.completed ? 'default' : 'pointer',
                      transition: 'all 0.3s ease'
                    }}
                    onMouseOver={(e) => {
                      if (!step.completed) {
                        e.currentTarget.style.transform = 'translateY(-2px)';
                        e.currentTarget.style.boxShadow = '0 8px 25px rgba(0, 0, 0, 0.2)';
                      }
                    }}
                    onMouseOut={(e) => {
                      if (!step.completed) {
                        e.currentTarget.style.transform = 'translateY(0)';
                        e.currentTarget.style.boxShadow = 'none';
                      }
                    }}
                  >
                    <div style={{
                  display: 'flex',
                  justifyContent: 'space-between',
                  alignItems: 'center'
                }}>
                  <div>
                        <h3 style={{
                    color: 'white',
                          fontSize: '18px',
                          fontWeight: '600',
                          margin: '0 0 8px 0'
                        }}>
                          {step.title}
                        </h3>
                        <p style={{
                          color: 'rgba(255, 255, 255, 0.8)',
                    fontSize: '14px',
                          margin: '0 0 8px 0'
                        }}>
                          {step.description}
                        </p>
                        <div style={{
                          display: 'flex',
                          gap: '12px',
                          fontSize: '12px',
                          color: 'rgba(255, 255, 255, 0.6)'
                        }}>
                          <span>Step {index + 1} of {workflowSteps.length}</span>
                          {step.estimatedTime && <span>Est. {step.estimatedTime}</span>}
                </div>
              </div>
                      <div style={{
                        display: 'flex',
                        alignItems: 'center',
                        gap: '12px'
                      }}>
                        {step.completed ? (
                          <span style={{
                            background: 'rgba(34, 197, 94, 0.3)',
                            color: '#22c55e',
                            padding: '6px 12px',
                            borderRadius: '6px',
                            fontSize: '12px',
                            fontWeight: '600'
                          }}>
                            ‚úÖ COMPLETED
                          </span>
                        ) : step.current ? (
                          <span style={{
                            background: 'rgba(59, 130, 246, 0.3)',
                            color: '#3b82f6',
                            padding: '6px 12px',
                            borderRadius: '6px',
                            fontSize: '12px',
                            fontWeight: '600'
                          }}>
                            ‚ö° CURRENT
                          </span>
                        ) : (
                          <span style={{
                            background: 'rgba(255, 255, 255, 0.2)',
                            color: 'rgba(255, 255, 255, 0.6)',
                            padding: '6px 12px',
                            borderRadius: '6px',
                            fontSize: '12px',
                            fontWeight: '600'
                          }}>
                            ‚è≥ PENDING
                          </span>
                        )}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}

        {/* Tracking View */}
        {activeView === 'tracking' && (
          <div style={{
            background: 'rgba(255, 255, 255, 0.15)',
            backdropFilter: 'blur(10px)',
            borderRadius: '16px',
            padding: '32px',
            border: '1px solid rgba(255, 255, 255, 0.2)',
            boxShadow: '0 8px 32px rgba(0, 0, 0, 0.1)'
          }}>
            <LiveGPSMap 
              driverId={driver?.id || 'DRV-001'} 
              height=""500px"" 
              autoStartTracking={true}
            />
          </div>
        )}

        {/* Communication View */}
        {activeView === 'communication' && (
          <div style={{
            background: 'rgba(255, 255, 255, 0.15)',
            backdropFilter: 'blur(10px)',
            borderRadius: '16px',
            padding: '32px',
            border: '1px solid rgba(255, 255, 255, 0.2)',
            boxShadow: '0 8px 32px rgba(0, 0, 0, 0.1)'
          }}>
            <h2 style={{ fontSize: '24px', fontWeight: 'bold', color: 'white', margin: '0 0 24px 0' }}>
              üí¨ Messages & Communication
            </h2>
            
            <div style={{ display: 'grid', gap: '16px' }}>
              {messages.map((message, index) => (
                <div
                  key={index}
                  style={{
                    background: message.read 
                      ? 'rgba(255, 255, 255, 0.1)' 
                      : 'rgba(59, 130, 246, 0.2)',
                    borderRadius: '12px',
                    padding: '20px',
                    border: `1px solid ${message.read 
                      ? 'rgba(255, 255, 255, 0.2)' 
                      : 'rgba(59, 130, 246, 0.4)'}`,
                    transition: 'all 0.3s ease'
                  }}
                >
                  <div style={{
            display: 'flex',
                    justifyContent: 'space-between',
            alignItems: 'center',
                    marginBottom: '8px'
          }}>
            <div style={{
                      color: 'white',
                      fontSize: '16px',
                      fontWeight: '600'
                    }}>
                      {message.from}
              </div>
                    <div style={{
                      color: 'rgba(255, 255, 255, 0.7)',
                      fontSize: '12px'
                    }}>
                      {message.timestamp}
              </div>
                  </div>
                  <p style={{
                    color: 'rgba(255, 255, 255, 0.9)',
                    fontSize: '14px',
                    margin: 0,
                    lineHeight: '1.5'
                  }}>
                    {message.content}
                  </p>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Performance View */}
        {activeView === 'performance' && (
                <div style={{
            background: 'rgba(255, 255, 255, 0.15)',
            backdropFilter: 'blur(10px)',
            borderRadius: '16px',
            padding: '32px',
            border: '1px solid rgba(255, 255, 255, 0.2)',
            boxShadow: '0 8px 32px rgba(0, 0, 0, 0.1)'
          }}>
            <h2 style={{ fontSize: '24px', fontWeight: 'bold', color: 'white', margin: '0 0 24px 0' }}>
              üìà Performance Analytics
            </h2>
            
            <div style={{
              display: 'grid',
              gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
              gap: '16px',
              marginBottom: '24px'
            }}>
              <div style={{
                background: 'rgba(255, 255, 255, 0.1)',
                  borderRadius: '12px',
                  padding: '20px',
                textAlign: 'center'
              }}>
                <div style={{ fontSize: '32px', marginBottom: '8px' }}>üèÜ</div>
                <div style={{ color: 'white', fontSize: '24px', fontWeight: 'bold' }}>
                  {performanceMetrics?.score || 95}%
                </div>
                <div style={{ color: 'rgba(255, 255, 255, 0.7)', fontSize: '14px' }}>
                  Overall Score
                </div>
                </div>

                <div style={{
                background: 'rgba(255, 255, 255, 0.1)',
                  borderRadius: '12px',
                  padding: '20px',
                textAlign: 'center'
              }}>
                <div style={{ fontSize: '32px', marginBottom: '8px' }}>üì¶</div>
                <div style={{ color: 'white', fontSize: '24px', fontWeight: 'bold' }}>
                  {performanceMetrics?.completedLoads || 127}
                </div>
                <div style={{ color: 'rgba(255, 255, 255, 0.7)', fontSize: '14px' }}>
                  Completed Loads
                </div>
                </div>

                <div style={{
                background: 'rgba(255, 255, 255, 0.1)',
                  borderRadius: '12px',
                  padding: '20px',
                textAlign: 'center'
              }}>
                <div style={{ fontSize: '32px', marginBottom: '8px' }}>‚è±Ô∏è</div>
                <div style={{ color: 'white', fontSize: '24px', fontWeight: 'bold' }}>
                  {performanceMetrics?.onTimeDelivery || 98}%
                </div>
                <div style={{ color: 'rgba(255, 255, 255, 0.7)', fontSize: '14px' }}>
                  On-Time Delivery
                </div>
                </div>

                <div style={{
                background: 'rgba(255, 255, 255, 0.1)',
                  borderRadius: '12px',
                  padding: '20px',
                textAlign: 'center'
              }}>
                <div style={{ fontSize: '32px', marginBottom: '8px' }}>‚≠ê</div>
                <div style={{ color: 'white', fontSize: '24px', fontWeight: 'bold' }}>
                  {performanceMetrics?.rating || 4.8}
                </div>
                <div style={{ color: 'rgba(255, 255, 255, 0.7)', fontSize: '14px' }}>
                  Average Rating
              </div>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Workflow Modal */}
      {showWorkflowModal && selectedStep && (
        <WorkflowStepModal
          step={selectedStep}
          onClose={() => setShowWorkflowModal(false)}
          onComplete={handleWorkflowStepComplete}
          driver={driver}
        />
      )}

      {/* CSS Animations */}
      <style jsx>{`
        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
        
        @keyframes pulse {
          0%, 100% { opacity: 1; }
          50% { opacity: 0.5; }
        }
      `}</style>
    </div>
  );
}
